#
# Bug #11880012: INDEX_SUBQUERY, BLACKHOLE,
#                HANG IN PREPARING WITH 100% CPU USAGE
#
CREATE TABLE t1(a INT NOT NULL);
INSERT INTO t1 VALUES (1), (2), (3);
CREATE TABLE t2 (a INT UNSIGNED, b INT, UNIQUE KEY (a, b)) ENGINE=BLACKHOLE;
SELECT 1 FROM t1 WHERE a = ANY (SELECT a FROM t2);
1
DROP TABLE t1, t2;
End of 5.5 tests 
#
# Bug#13948247 DIVISION BY 0 IN GET_BEST_DISJUNCT_QUICK WITH FORCE INDEX GROUP BY
#
CREATE TABLE t1(a INT, b INT, c INT, KEY(c), UNIQUE(a)) ENGINE = BLACKHOLE;
SELECT 0 FROM t1 FORCE INDEX FOR GROUP BY(a) WHERE a = 0 OR b = 0 AND c = 0;
0
DROP TABLE t1;
End of 5.6 tests
#
# Bug#33250020: regression: FullTextSearchIterator::Init():
#               Assertion `m_ft_func->ft_handler != nullptr' failed.
#
CREATE TABLE t(a VARCHAR(10), FULLTEXT (a)) ENGINE = BLACKHOLE;
INSERT INTO t VALUES ('abc'), ('xyz');
SELECT MATCH (a) AGAINST ('abc') AS score FROM t;
score
SELECT 1 FROM t WHERE MATCH (a) AGAINST ('abc');
1
DROP TABLE t;
# Test transactions with blackhole transactions enabled
SET @@global.blackhole_transactions=1;
CREATE TABLE t(a INT NOT NULL) ENGINE=BLACKHOLE;
# Test commit
START TRANSACTION;
INSERT INTO t VALUES (1), (2);
COMMIT;
SELECT * from t;
a
# Test rollback
START TRANSACTION;
INSERT INTO t VALUES (1), (2);
ROLLBACK;
SELECT * from t;
a
# Test transaction with consistent snapshot.
# Should behave just like a normal transaction.
# There just won't be snapshots used on the blackhole engine.
START TRANSACTION WITH CONSISTENT SNAPSHOT;
SELECT * from t;
a
INSERT INTO t VALUES (1), (2);
COMMIT;
SELECT * from t;
a
# Test transaction with shared snapshot on blackhole engine specifically.
# Should fail because we don't support it.
START TRANSACTION WITH SHARED BLACKHOLE SNAPSHOT;
ERROR HY000: Shared snapshot is not supported for this engine
# Test transaction with existing shared snapshot on blackhole engine
# specifically. Should fail because we don't support it.
START TRANSACTION WITH EXISTING BLACKHOLE SNAPSHOT 1;
ERROR HY000: Shared snapshot is not supported for this engine
# Creating an explicit snapshot for blackhole should fail because we
# don't support it.
CREATE EXPLICIT BLACKHOLE SNAPSHOT;
ERROR HY000: Explicit snapshots are not supported by this engine
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t1(a INT NOT NULL)
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t1)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Xid	#	#	COMMIT /* XID */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t2 (a INT UNSIGNED, b INT, UNIQUE KEY (a, b)) ENGINE=BLACKHOLE
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t2` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t1` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t1(a INT, b INT, c INT, KEY(c), UNIQUE(a)) ENGINE = BLACKHOLE
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t1` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t(a VARCHAR(10), FULLTEXT (a)) ENGINE = BLACKHOLE
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t(a INT NOT NULL) ENGINE=BLACKHOLE
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
DROP TABLE t;
# Test transactions with blackhole transactions disabled
SET @@global.blackhole_transactions=0;
CREATE TABLE t(a INT NOT NULL) ENGINE=BLACKHOLE;
# Test commit
START TRANSACTION;
INSERT INTO t VALUES (1), (2);
COMMIT;
SELECT * from t;
a
# Test rollback
START TRANSACTION;
INSERT INTO t VALUES (1), (2);
ROLLBACK;
SELECT * from t;
a
# Test transaction with consistent snapshot.
# Should behave just like a normal transaction.
# There just won't be snapshots used on the blackhole engine.
START TRANSACTION WITH CONSISTENT SNAPSHOT;
SELECT * from t;
a
INSERT INTO t VALUES (1), (2);
COMMIT;
SELECT * from t;
a
# Test transaction with shared snapshot on blackhole engine specifically.
# Should fail because we don't support it.
START TRANSACTION WITH SHARED BLACKHOLE SNAPSHOT;
ERROR HY000: Shared snapshot is not supported for this engine
# Test transaction with existing shared snapshot on blackhole engine
# specifically. Should fail because we don't support it.
START TRANSACTION WITH EXISTING BLACKHOLE SNAPSHOT 1;
ERROR HY000: Shared snapshot is not supported for this engine
# Creating an explicit snapshot for blackhole should fail because we
# don't support it.
CREATE EXPLICIT BLACKHOLE SNAPSHOT;
ERROR HY000: Explicit snapshots are not supported by this engine
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t1(a INT NOT NULL)
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t1)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Xid	#	#	COMMIT /* XID */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t2 (a INT UNSIGNED, b INT, UNIQUE KEY (a, b)) ENGINE=BLACKHOLE
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t2` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t1` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t1(a INT, b INT, c INT, KEY(c), UNIQUE(a)) ENGINE = BLACKHOLE
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t1` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t(a VARCHAR(10), FULLTEXT (a)) ENGINE = BLACKHOLE
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t(a INT NOT NULL) ENGINE=BLACKHOLE
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
binlog.000001	#	Query	#	#	use `test`; DROP TABLE `t` /* generated by server */
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t(a INT NOT NULL) ENGINE=BLACKHOLE
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
binlog.000001	#	Query	#	#	BEGIN
binlog.000001	#	Table_map	#	#	table_id: # (test.t)
binlog.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
binlog.000001	#	Query	#	#	COMMIT
DROP TABLE t;
