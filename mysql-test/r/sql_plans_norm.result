create database test_db;
use test_db;
CREATE TABLE t1 (
pk_col1 INT NOT NULL,
pk_col2 INT NOT NULL,
c1 CHAR(64) NOT NULL,
c2 CHAR(64) NOT NULL,
PRIMARY KEY(pk_col1, pk_col2),
KEY c1_c2_idx (c1, c2)
) ENGINE=INNODB;
INSERT INTO t1 VALUES (1,1,'a','b'), (1,2,'a','b'),
(1,3,'a','c'), (1,4,'a','c'),
(2,1,'a','d'), (3,1,'a','b'),
(4,1,'d','b'), (4,2,'e','b'),
(5,3,'f','c'), (5,4,'k','c'),
(6,1,'y','d'), (6,2,'f','b');
SELECT @@sql_plans_control;
@@sql_plans_control
OFF_HARD
SELECT @@sql_plans_max_buffer;
@@sql_plans_max_buffer
10485760
SELECT @@sql_plans_sampling_rate;
@@sql_plans_sampling_rate
1
SELECT @@sql_plans_norm_prune_expr_trees;
@@sql_plans_norm_prune_expr_trees
0
SELECT @@sql_plans_norm_prune_in_lists;
@@sql_plans_norm_prune_in_lists
0
SELECT @@sql_plans_norm_use_arg_counts;
@@sql_plans_norm_use_arg_counts
0

.*************************************************.
| Test basic IN list pruning from captured plans  |
`*************************************************`

set @@GLOBAL.sql_plans_norm_prune_in_lists=ON;
set @@GLOBAL.sql_plans_control=ON;
SELECT * FROM t1 where pk_col1 in (1, 2, 3, 4, 5) and pk_col2 not in (2, 3, 4, 5, 6, 7);
SELECT PLAN_ID, PLAN_ROW FROM performance_schema.sql_plans ORDER BY LAST_RECORDED DESC LIMIT 1;
PLAN_ID	PLAN_ROW
6dce3e504bb8eb32fc9422591044f86a	-> Filter: ((t1.pk_col1 in (...) and (t1.pk_col2 not in (...))
    -> Covering index scan on t1 using c1_c2_idx

SELECT c1, (SELECT AVG(pk_col2) from t1 where c1 in ('d', 'e', 'f', 'g', 'h')  and c2 in ('i', 'j', 'k', 'l', 'm', 'n')) col2_avg from t1 where pk_col1 in (2, 4, 6, 8, 10);
SELECT PLAN_ID, PLAN_ROW FROM performance_schema.sql_plans ORDER BY LAST_RECORDED DESC LIMIT 1;
PLAN_ID	PLAN_ROW
01f92bb7fbf7a3d0bf2583fd7f761d0a	-> Filter: (t1.pk_col1 in (...)
    -> Covering index scan on t1 using c1_c2_idx
-> Select #2 (subquery in projection; run only once)
    -> Aggregate: avg(t1.pk_col2)
        -> Filter: ((t1.c1 in (...) and (t1.c2 in (...))
            -> Covering index scan on t1 using c1_c2_idx

SELECT * from t1 where pk_col1 > ANY ( select c1 from t1 where pk_col1 IN (1, 2, 3, 4, 5)) and pk_col2 NOT IN (2, 4, 6, 8) and c2 in ('aa', 'bb', 'cc', 'dd');
SELECT PLAN_ID, PLAN_ROW FROM performance_schema.sql_plans ORDER BY LAST_RECORDED DESC LIMIT 1;
PLAN_ID	PLAN_ROW
72b459e9db054be513ec8446f0165881	-> Filter: (<nop>((t1.pk_col1 > (select #2))) and (t1.pk_col2 not in (...) and (t1.c2 in (...))
    -> Covering index scan on t1 using c1_c2_idx
    -> Select #2 (subquery in condition; run only once)
        -> Aggregate: min(t1.c1)
            -> Filter: (t1.pk_col1 in (...)
                -> Covering index scan on t1 using c1_c2_idx

with t1_ as (SELECT * from t1 where c1 in ('aa', 'bb', 'cc', 'dd', 'a', 'b', 'c', 'd') and pk_col2 in (4, 5, 6, 7, 8, 9, 10)) SELECT t1.pk_col2, AVG(t1.pk_col1) FROM t1 JOIN t1_ where t1.pk_col1 in (1, 2, 3, 4, 5) group by t1.pk_col2 having t1.pk_col2 in (2, 3, 4, 5, 6, 7);
SELECT PLAN_ID, PLAN_ROW FROM performance_schema.sql_plans ORDER BY LAST_RECORDED DESC LIMIT 1;
PLAN_ID	PLAN_ROW
41d892351b07558a1fc6c1e69a23af41	-> Filter: (t1.pk_col2 in (...)
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Inner hash join (no condition)
                -> Filter: (t1.pk_col1 in (...)
                    -> Covering index scan on t1 using c1_c2_idx
                -> Hash
                    -> Filter: ((t1.c1 in (...) and (t1.pk_col2 in (...))
                        -> Covering index scan on t1 using c1_c2_idx

set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_norm_prune_in_lists=OFF;

.*******************************************.
| Test plan capture without IN list pruning |
`*******************************************`

set @@GLOBAL.sql_plans_control=ON;
SELECT #1
SELECT pk_col2, AVG(pk_col1) FROM t1 WHERE pk_col1 IN (1, 2, 3, 4) AND pk_col1 NOT IN (5, 6, 7, 8) 
GROUP BY pk_col2 HAVING pk_col2 IN (1, 2, 3, 4, 5);
SELECT #2
SELECT pk_col2, AVG(pk_col1) FROM t1 WHERE pk_col1 IN (1, 2, 3, 4, 5) AND pk_col1 NOT IN (6, 7, 8, 9, 10) 
GROUP BY pk_col2 HAVING pk_col2 IN (1, 2, 3, 4, 5, 6);
SELECT #3
SELECT pk_col2, AVG(pk_col1) FROM t1 WHERE pk_col1 IN (1, 2, 3, 4, 5, 6) AND pk_col1 NOT IN (7, 8, 9, 10, 11, 12) 
GROUP BY pk_col2 HAVING pk_col2 IN (1, 2, 3, 4, 5, 6, 7);

-> There should be three plans for the above 3 SELECT statements
without IN list pruning

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;
PLAN_ID	COUNT_OCCUR	PLAN_ROW
aa15a8763db928f576a9f598602169ba	1	-> Filter: (t1.pk_col2 in (?,?,?,?,?,?,?))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 in (?,?,?,?,?,?)) and (t1.pk_col1 not in (?,?,?,?,?,?)))
                -> Covering index scan on t1 using c1_c2_idx

bb912ff5c8a864ace636f5ede378f2f1	1	-> Filter: (t1.pk_col2 in (?,?,?,?,?,?))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 in (?,?,?,?,?)) and (t1.pk_col1 not in (?,?,?,?,?)))
                -> Covering index scan on t1 using c1_c2_idx

ea918a0ef6ef0e81c7e36c160e25a507	1	-> Filter: (t1.pk_col2 in (?,?,?,?,?))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 in (?,?,?,?)) and (t1.pk_col1 not in (?,?,?,?)))
                -> Covering index scan on t1 using c1_c2_idx

Cleaning up state 
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_norm_prune_in_lists=OFF;

.*******************************************.
| Test plan capture with IN list pruning |
`*******************************************`

set @@GLOBAL.sql_plans_control=ON;
set @@GLOBAL.sql_plans_norm_prune_in_lists=ON;
SELECT #1
SELECT pk_col2, AVG(pk_col1) FROM t1 WHERE pk_col1 IN (1, 2, 3, 4) AND pk_col1 NOT IN (5, 6, 7, 8) 
GROUP BY pk_col2 HAVING pk_col2 IN (1, 2, 3, 4, 5);
SELECT #2
SELECT pk_col2, AVG(pk_col1) FROM t1 WHERE pk_col1 IN (1, 2, 3, 4, 5) AND pk_col1 NOT IN (6, 7, 8, 9, 10) 
GROUP BY pk_col2 HAVING pk_col2 IN (1, 2, 3, 4, 5, 6);
SELECT #3
SELECT pk_col2, AVG(pk_col1) FROM t1 WHERE pk_col1 IN (1, 2, 3, 4, 5, 6) AND pk_col1 NOT IN (7, 8, 9, 10, 11, 12) 
GROUP BY pk_col2 HAVING pk_col2 IN (1, 2, 3, 4, 5, 6, 7);

-> There should be only one plan for the above 3 SELECT statements
with IN list pruning turned ON

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;
PLAN_ID	COUNT_OCCUR	PLAN_ROW
572d7df5f92859c99c6635e90780ce01	3	-> Filter: (t1.pk_col2 in (...)
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 in (...) and (t1.pk_col1 not in (...))
                -> Covering index scan on t1 using c1_c2_idx

Cleaning up state 
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_norm_prune_in_lists=OFF;

.*******************************************.
| Test plan capture without EXPR TREE pruning |
`*******************************************`

set @@GLOBAL.sql_plans_control=ON;
SELECT #1
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 2 AND pk_col2 < 8 GROUP BY pk_col1, c1 HAVING sum < 5 AND c1 NOT IN ('a', 'b', 'd', 'f') ;
SELECT #2
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 1 AND pk_col2 < 9 GROUP BY pk_col1, c1 HAVING sum < 5 AND sum > 1  AND c1 IN ('a', 'b', 'd', 'f') ;
SELECT #3
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 3 AND pk_col2 < 7 GROUP BY pk_col1, c1 HAVING sum < 5 AND sum > 1  AND c1 NOT IN ('a', 'b', 'd', 'f') OR c1 LIKE '%c%';
SELECT #4
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 0 AND pk_col2 < 6 AND c2 IN ('b', 'c', 'f') GROUP BY pk_col1, c1 HAVING sum < 5 AND c1 NOT IN ('a', 'b', 'd', 'f') ;

-> There should be four different plans for the above 4 SELECT statements
with EXPR TREE pruning turned OFF

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;
PLAN_ID	COUNT_OCCUR	PLAN_ROW
16f59194e6a996e0203f2cf21919e05e	1	-> Filter: ((sum < ?) and (t1.c1 not in (?,?,?,?)))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 > ?) and (t1.pk_col2 < ?) and (t1.c2 in (?,?,?)))
                -> Index range scan on t1 using PRIMARY over (? < pk_col1)

e3ce5c0beb7dcfda08273e77aea09679	1	-> Filter: (((sum < ?) and (sum > ?) and (t1.c1 not in (?,?,?,?))) or (t1.c1 like ?))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 > ?) and (t1.pk_col2 < ?))
                -> Index range scan on t1 using PRIMARY over (? < pk_col1)

9b86e091673f288d41986df77ca5b382	1	-> Filter: ((sum < ?) and (sum > ?) and (t1.c1 in (?,?,?,?)))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 > ?) and (t1.pk_col2 < ?))
                -> Index range scan on t1 using PRIMARY over (? < pk_col1)

b7963d9bb9424d6d89ad0b1e51c7baaa	1	-> Filter: ((sum < ?) and (t1.c1 not in (?,?,?,?)))
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: ((t1.pk_col1 > ?) and (t1.pk_col2 < ?))
                -> Index range scan on t1 using PRIMARY over (? < pk_col1)

Cleaning up state 
set @@GLOBAL.sql_plans_control=OFF_HARD;

.*******************************************.
| Test plan capture with EXPR TREE pruning |
`*******************************************`

set @@GLOBAL.sql_plans_control=ON;
set @@GLOBAL.sql_plans_norm_prune_expr_trees=ON;
SELECT #1
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 2 AND pk_col2 < 8 GROUP BY pk_col1, c1 HAVING sum < 5 AND c1 NOT IN ('a', 'b', 'd', 'f') ;
SELECT #2
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 1 AND pk_col2 < 9 GROUP BY pk_col1, c1 HAVING sum < 5 AND sum > 1  AND c1 IN ('a', 'b', 'd', 'f') ;
SELECT #3
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 3 AND pk_col2 < 7 GROUP BY pk_col1, c1 HAVING sum < 5 AND sum > 1  AND c1 NOT IN ('a', 'b', 'd', 'f') OR c1 LIKE '%c%';
SELECT #4
SELECT pk_col1, c1, SUM(pk_col2) AS sum FROM t1 WHERE pk_col1 > 0 AND pk_col2 < 6 AND c2 IN ('b', 'c', 'f') GROUP BY pk_col1, c1 HAVING sum < 5 AND c1 NOT IN ('a', 'b', 'd', 'f') ;

-> There should be only one plan for the above 4 SELECT statements
with EXPR TREE pruning turned ON

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;
PLAN_ID	COUNT_OCCUR	PLAN_ROW
03b4142a53a27f49047f10f418477dc4	4	-> Filter: (<Cond expr>)
    -> Table scan on <temporary>
        -> Aggregate using temporary table
            -> Filter: (<Cond expr>)
                -> Index range scan on t1 using PRIMARY over <Range expr>

set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_norm_prune_expr_trees=OFF;
drop table t1;
drop database test_db;
