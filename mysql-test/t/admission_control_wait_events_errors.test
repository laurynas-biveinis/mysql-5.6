create database test_db;
create user test_user@localhost;
grant all on test_db.* to test_user@localhost;

use test_db;

create table t1(a int) engine=InnoDB;

set @save_max_running_queries = @@max_running_queries;
set @save_admission_control_queue_timeout = @@admission_control_queue_timeout;
set @save_admission_control_wait_events = @@admission_control_wait_events;

set @@global.max_running_queries=1;
set @@global.admission_control_queue_timeout=0;

source include/count_sessions.inc;

--echo
--echo # Test 1: MDL table lock.
--echo #

set @@global.admission_control_wait_events='META_DATA_LOCK';

lock table t1 write;

connect(con1, localhost, test_user,,test_db);
connect(con2, localhost, test_user,,test_db);

connection con2;
send insert into t1 values(1);

connection default;
let $wait_condition =
  select count(*) = 1 from information_schema.processlist where state = 'Waiting for table metadata lock';
source include/wait_condition.inc;

connection con1;
let $con1_id = `SELECT CONNECTION_ID()`;
send select sleep(1000);

connection default;
let $wait_condition =
  select count(*) = 1 from information_schema.processlist where state = 'User sleep';
source include/wait_condition.inc;
unlock tables;

connection con2;
error ER_DB_ADMISSION_CONTROL_TIMEOUT;
reap;

connection default;
disable_query_log;
eval KILL QUERY $con1_id;
enable_query_log;
connection con1;
reap;


--echo
--echo # Test 2: Row lock with update.
--echo #

connection default;
set @@global.admission_control_wait_events='ROW_LOCK';

insert into t1 values(1);

begin;
update t1 set a = 2 where a = 1;

connection con2;
send update t1 set a = 2 where a = 1;

connection default;
let $wait_condition =
  select count(*) = 1 from performance_schema.data_lock_waits;
source include/wait_condition.inc;

connection con1;
send select sleep(1000);

connection default;
let $wait_condition =
  select count(*) = 1 from information_schema.processlist where state = 'User sleep';
source include/wait_condition.inc;
rollback;

connection con2;
error ER_DB_ADMISSION_CONTROL_TIMEOUT;
reap;

connection default;
disable_query_log;
eval KILL QUERY $con1_id;
enable_query_log;
connection con1;
reap;


--echo
--echo # Test 3: Gap lock with insert.
--echo #

connection default;
CREATE TABLE t2 (id int NOT NULL, PRIMARY KEY(id)) ENGINE=InnoDB;
insert into t2 values(100);

begin;
select * from t2 where id <= 100 for update;

connection con2;
send insert into t2 values(80);

connection default;
let $wait_condition =
  select count(*) = 1 from performance_schema.data_lock_waits;
source include/wait_condition.inc;

connection con1;
send select sleep(1000);

connection default;
let $wait_condition =
  select count(*) = 1 from information_schema.processlist where state = 'User sleep';
source include/wait_condition.inc;
rollback;

connection con2;
error ER_DB_ADMISSION_CONTROL_TIMEOUT;
reap;

connection default;
disable_query_log;
eval KILL QUERY $con1_id;
enable_query_log;
connection con1;
reap;

--echo
--echo # Test 4: Row lock with delete.
--echo #

connection default;
begin;
update t1 set a = 2 where a = 1;

connection con2;
send delete from t1 where a = 1;

connection default;
let $wait_condition =
  select count(*) = 1 from performance_schema.data_lock_waits;
source include/wait_condition.inc;

connection con1;
send select sleep(1000);

connection default;
let $wait_condition =
  select count(*) = 1 from information_schema.processlist where state = 'User sleep';
source include/wait_condition.inc;
rollback;

connection con2;
error ER_DB_ADMISSION_CONTROL_TIMEOUT;
reap;

connection default;
disable_query_log;
eval KILL QUERY $con1_id;
enable_query_log;
connection con1;
reap;


--echo
--echo # Cleanup
--echo #
connection default;
drop table t1;
drop table t2;

disconnect con1;
disconnect con2;

source include/wait_until_count_sessions.inc;

set global max_running_queries = @save_max_running_queries;
set global admission_control_queue_timeout = @save_admission_control_queue_timeout;
set global admission_control_wait_events = @save_admission_control_wait_events;

drop database test_db;
drop user test_user@localhost;
