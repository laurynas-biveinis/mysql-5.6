create database test_db;
use test_db;

CREATE TABLE t1 (
pk INT NOT NULL AUTO_INCREMENT,
a INT,
b INT,
c INT,
PRIMARY KEY (pk),
KEY idx1 (a),
KEY idx2 (b, a),
KEY idx3 (a, b)
) ENGINE = InnoDB;

INSERT INTO t1 (a, b, c) VALUES
(1, 1, 1), (1, 2, 5), (1, 2, 6), (1, 6, 6),
(2, 1, 1), (2, 2, 5), (2, 3, 8), (2, 6, 9),
(3, 1, 1), (3, 2, 5), (3, 3, 8), (3, 6, 9);

CREATE TABLE t2 (
pk_col1 INT NOT NULL,
pk_col2 INT NOT NULL,
c1 CHAR(64) NOT NULL,
c2 CHAR(64) NOT NULL,
PRIMARY KEY(pk_col1, pk_col2),
KEY c1_c2_idx (c1, c2)
) ENGINE=INNODB;


INSERT INTO t2 VALUES (1,1,'a','b'), (1,2,'a','b'),
(1,3,'a','c'), (1,4,'a','c'),
(2,1,'a','d'), (3,1,'a','b'),
(4,1,'d','b'), (4,2,'e','b'),
(5,3,'f','c'), (5,4,'k','c'),
(6,1,'y','d'), (6,2,'f','b');

# Make sure all sql_plans controls are OFF

SELECT @@sql_plans_control;
SELECT @@sql_plans_max_buffer;
SELECT @@sql_plans_sampling_rate;
SELECT @@sql_plans_norm_prune_expr_trees;
SELECT @@sql_plans_norm_prune_in_lists;
SELECT @@sql_plans_norm_use_arg_counts;

# With sql_plans OFF, the following statements will have no output in
# the P_S.SQL_PLANS table

SELECT * FROM t1;
SELECT * FROM t2;

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

# Now, set just the sql_plans_control = ON;

set @@GLOBAL.sql_plans_control=ON;
select @@sql_plans_control;

# Now, the following SELECTs will have their SQL PLANs captured

disable_result_log;

SELECT * FROM t1;
SELECT * FROM t2;

enable_result_log;

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

# At this point, there should be 4 entries in the P_S.SQL_PLANS table
# 2 entries for the sql_plans for tables t1 and t2
# 1 entry for the P_S.SQL_PLANS tables (should have 2 COUNT_OCCUR
#   *after* this statement)
# There will no entry for the sql_plans_control SELECT access as plans without
#   tables are not captured

--echo
--echo  .*********************************************************.
--echo  | Test that SQL Plans got captured in P_S.SQL_PLANS table |
--echo  `*********************************************************`
--echo
--echo -> There should be a count of 3 in the following SELECT query
--echo    These include the previous 3 SELECTs issued above
--echo

SELECT COUNT(*) FROM performance_schema.sql_plans;

# Next, check that turning the sql_plans_control OFF at this stage clears up 
# the P_S.SQL_PLANS table

--echo
--echo  .*************************************************************.
--echo  | Test that OFF_HARD switch cleans up the P_S.SQL_PLANS table |
--echo  `*************************************************************`
--echo
--echo -> There should be no output in the following SELECT query 
--echo

set @@GLOBAL.sql_plans_control=OFF_HARD;
SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

# Next, test that 5 different statement leads to as many plans getting captured

--echo
--echo  .**************************************************************.
--echo  | Test basic plan normalization, plan hashing and plan capture |
--echo  `**************************************************************`
--echo

set @@GLOBAL.sql_plans_control=ON;
disable_result_log;

--echo SELECT #1
SELECT * FROM t1;
--echo SELECT #2
SELECT * FROM t2;
--echo SELECT #3
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col1;
--echo SELECT #4
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk > 3 AND t2.pk_col1 <= 3;
--echo SELECT #5
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk >= 3 AND t1.pk <= 3 AND t2.pk_col2 IN (5, 6, 7, 8, 9);

enable_result_log;

--echo
--echo -> There should be 5 different plans captured corresponding to the
--echo    above SELECTs
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

# Next, test that the same 5 statements as in the previous section do not
# add more entries to the P_S.SQL_PLANS table

--echo
--echo  .*******************************************.
--echo  | Test correct hashing for repeated queries |
--echo  `*******************************************`
--echo

disable_result_log;

--echo SELECT #1
SELECT * FROM t1;
--echo SELECT #2
SELECT * FROM t2;
--echo SELECT #3
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col1;
--echo SELECT #4
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk > 3 AND t2.pk_col1 <= 3;
--echo SELECT #5
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk >= 3 AND t1.pk <= 3 AND t2.pk_col2 IN (5, 6, 7, 8, 9);

enable_result_log;

--echo
--echo -> Testing that SELECTs issued twice don't add new entries to P_S.SQL_PLANS
--echo    This time, there should be 6 different plans in the output,
--echo    5 corresponding to the previous 5 plans, and a 6th one for the P_S
--echo    SELECT query itself
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

--echo
--echo  .*************************************************.
--echo  | Test correct hashing for multistatement queries |
--echo  `*************************************************`
--echo

disable_result_log;

--echo SELECT #1 and #2
DELIMITER //;
SELECT * FROM t1 //
SELECT * FROM t2 //
DELIMITER ;//

enable_result_log;

--echo
--echo -> Testing that repeated SELECTs don't add new entries to P_S.SQL_PLANS
--echo    This time there should, again, be 6 different plans in the output.
--echo    The COUNT for the last two SELECTs will go up to 3. And the count for
--echo    the sql_plans table scan will also go up to 2. 
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

# Don't RESET state for this next test

# Next, test that with sql_plans_control=OFF_SOFT, 5 new statements do not
# add more entries to the P_S.SQL_PLANS table

--echo
--echo  .*********************************.
--echo  | Test sql_plans_control=OFF_SOFT |
--echo  `*********************************`
--echo

set @@GLOBAL.sql_plans_control=OFF_SOFT;
disable_result_log;

--echo SELECT #1
SELECT * FROM t1 where a = 5 and b > 10;
--echo SELECT #2
SELECT * FROM t1 where a = 5 and b > 10 and c < 4;
--echo SELECT #3
SELECT * FROM t1 where a = 5 and b > 10 and c < 4 or c > 10;
--echo SELECT #4
SELECT * FROM t1 where a = 5 and b > 10 and (c < 4 or c > 10) or b in (1, 8, 88);

enable_result_log;

--echo
--echo -> Testing that SELECTs issued after sql_plans_control=OFF_SOFT
--echo    don't add new entries to P_S.SQL_PLANS
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

# Don't RESET state for this next test

# Next, test that with sql_plans_control=ON again, 5 new statements do
# add more entries to the P_S.SQL_PLANS table

--echo
--echo  .*****************************************.
--echo  | Test sql_plans_control=ON from OFF_SOFT |
--echo  `*****************************************`
--echo

set @@GLOBAL.sql_plans_control=ON;
disable_result_log;

--echo SELECT #1
SELECT * FROM t1 where a = 5 and b > 10;
--echo SELECT #2
SELECT * FROM t1 where a = 5 and b > 10 and c < 4;
--echo SELECT #3
SELECT * FROM t1 where a = 5 and b > 10 and c < 4 or c > 10;
--echo SELECT #4
SELECT * FROM t1 where a = 5 and b > 10 and (c < 4 or c > 10) or b in (1, 8, 88);

enable_result_log;

--echo
--echo -> Testing that SELECTs issued after sql_plans_control=ON after being
--echo    at OFF_SOFT start adding new entries to P_S.SQL_PLANS again,
--echo    carrying from before.
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

--echo Reset state before next test
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_control=ON;

# Next, test that three different SELECT statements with the same
# normalized sql plan should have only a single entry in P_S.SQL_PLANS

--echo
--echo  .********************************************.
--echo  | Test plan normalization for basic literals |
--echo  `********************************************`
--echo
disable_result_log;

--echo SELECT #1
SELECT * FROM t2 where pk_col1 > 3 AND pk_col2 <= 5;
--echo SELECT #2
SELECT * FROM t2 where pk_col1 > 13 AND pk_col2 <= 15;
--echo SELECT #3
SELECT * FROM t2 where pk_col1 > 23 AND pk_col2 <= 25;

enable_result_log;

--echo
--echo -> There should be only one plan for the above 3 SELECT statements
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

--echo Reset state before next test
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_control=ON;

# Next, test basic IN lists normalization with default settings
# In this test, the IN lists are normalized with '?' for each literal,
# and, therefore, IN lists with same # of literals will have the
# same plan.

--echo
--echo  .********************************************.
--echo  | Test basic plan normalization for IN lists |
--echo  `********************************************`
--echo

disable_result_log;

--echo SELECT #1
SELECT * FROM t1 where c IN (5, 6, 7, 8, 9);
--echo SELECT #2
SELECT * FROM t1 where c IN (6, 5, 8, 9, 7);
--echo SELECT #3
SELECT * FROM t1 where c IN (1, 12, 3, 15, 19, 21, 23);
--echo SELECT #4
SELECT * FROM t1 where c IN (21, 22, 23, 25, 29, 31, 33);

enable_result_log;

--echo There should be only two plans for the above 4 SELECT statements
SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

--echo Reset state before next test
set @@GLOBAL.sql_plans_control=OFF_HARD;

# Next, test the plan sampling rate control 

--echo
--echo  .******************************.
--echo  | Test sql_plans_sampling_rate |
--echo  `******************************`
--echo

set @@GLOBAL.sql_plans_control=ON;
set @@GLOBAL.sql_plans_sampling_rate=2;

disable_result_log;

--echo SELECT #1
SELECT * FROM t1;
--echo SELECT #2
SELECT * FROM t2;
--echo SELECT #3
SELECT * FROM t1 JOIN t2 ON t1.c > 1;
--echo SELECT #4
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col1;
--echo SELECT #5
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk > 3 AND t2.pk_col1 <= 3;
--echo SELECT #6
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk >= 3 AND t1.pk <= 3 AND t2.pk_col2 IN (5, 6, 7, 8, 9);

enable_result_log;

--echo
--echo -> There should be only 3 plans captured for the above 6 SELECT statements 
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

--echo Reset state before next test
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_sampling_rate=1;

# Next, test the sql_plans_max_buffer control

--echo
--echo  .*****************************.
--echo  | Test sql_plans_max_buffer A |
--echo  `*****************************`
--echo

set @@GLOBAL.sql_plans_control=ON;
set @@GLOBAL.sql_plans_max_buffer=20;

disable_result_log;

--echo SELECT #1
SELECT * FROM t1 limit 1;
--echo SELECT #2
SELECT * FROM t2 limit 1;
--echo SELECT #3
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col1 limit 1;
--echo SELECT #4
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col2 limit 1;
--echo SELECT #5
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk > 3 AND t2.pk_col1 <= 3 limit 1;
--echo SELECT #6
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk >= 3 AND t1.pk <= 3 AND t2.pk_col2 IN (5, 6, 7, 8, 9) limit 1;

enable_result_log;

--echo
--echo -> There should be only 1 plan captured for the above 6 SELECT statements 
--echo    because of "sql_plans_max_buffer" set to 20 bytes
--echo

SELECT PLAN_ID, COUNT_OCCUR, PLAN_ROW FROM performance_schema.sql_plans;

--echo Reset state before next test
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_max_buffer=10485760;

--echo
--echo  .*****************************.
--echo  | Test sql_plans_max_buffer B |
--echo  `*****************************`
--echo

set @@GLOBAL.sql_plans_control=ON;
set @@GLOBAL.sql_plans_max_buffer=150;

disable_result_log;

--echo SELECT #1
SELECT * FROM t1 limit 1;
--echo SELECT #2
SELECT * FROM t2 limit 1;
--echo SELECT #3
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col1 limit 1;
--echo SELECT #4
SELECT * FROM t1 JOIN t2 ON t1.c = t2.pk_col2 limit 1;
--echo SELECT #5
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk > 3 AND t2.pk_col1 <= 3 limit 1;
--echo SELECT #6
SELECT t1.* FROM t2 JOIN t1 ON t1.a = t2.pk_col1 where t1.pk >= 3 AND t1.pk <= 3 AND t2.pk_col2 IN (5, 6, 7, 8, 9) limit 1;

enable_result_log;

--echo
--echo -> There should be only 2 plans captured for the above 6 SELECT statements 
--echo    because of "sql_plans_max_buffer" set to 150 bytes
--echo

SELECT PLAN_ROW, PLAN_ID, COUNT_OCCUR FROM performance_schema.sql_plans;

--echo Reset state before next test
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.sql_plans_max_buffer=10485760;

# Next, test that PLAN ID shows up in MT STATS table
# let $x = `SELECT a FROM t1 WHERE id = $n`;

--echo
--echo  .**************************.
--echo  | Test PLAN_ID in MT STATS |
--echo  `**************************`
--echo

set @@GLOBAL.performance_schema_esms_by_all=ON;
set @@GLOBAL.sql_plans_control=ON;

let $query = SELECT * FROM t1 LIMIT 1;
eval $query;
let $plan_id = `SELECT PLAN_ID FROM performance_schema.sql_plans`;

let $query_text = `select QUERY_SAMPLE_TEXT from performance_schema.events_statements_summary_by_all where PLAN_ID = '$plan_id'`;

--echo
--echo -> PLAN_ID obtained from P_S.SQL_PLANS: $plan_id
--echo    QUERY_TEXT from P_S.ESMS_BY_ALL using the above PLAN_ID: $query_text
--echo
--echo    If the following assert holds true, then the correct PLAN ID is being
--echo    stored in P_S.ESMS_BY_ALL for the sample query
--echo 

assert($query_text == $query);

# Clean up all state changes 

set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.performance_schema_esms_by_all=off;

--echo
--echo  .****************************************.
--echo  | Test `sql_plans_skip_builtin_db` control |
--echo  `****************************************`
--echo

set @@GLOBAL.sql_plans_skip_builtin_db=ON;
set @@GLOBAL.sql_plans_control=ON;

--echo 
--echo -> sql_plans table before
--echo

SELECT * FROM performance_schema.sql_plans;

--echo 
--echo -> Issue some system table queries
--echo 

disable_result_log;

select @@GLOBAL.sql_plans_control;
select @@GLOBAL.sql_plans_skip_builtin_db;

select * from performance_schema.sql_plans;
select * from information_schema.processlist;
select * from sys.host_summary;
select * from mysql.db;

enable_result_log;

--echo 
--echo -> sql_plans table with sql_plans_skip_builtin_db=ON
--echo

# Note that the non table SELECTs also don't have entries 

SELECT * FROM performance_schema.sql_plans;

--echo
--echo -> Now turn `sql_plans_skip_builtin_db` back OFF
--echo

set @@GLOBAL.sql_plans_skip_builtin_db=OFF;

--echo 
--echo -> Issue some system table queries again
--echo 

disable_result_log;

select @@GLOBAL.sql_plans_control;
select @@GLOBAL.sql_plans_skip_builtin_db;

select * from performance_schema.sql_plans;
select * from information_schema.processlist;
select * from sys.host_summary;
select * from mysql.db;

enable_result_log;

--echo 
--echo -> sql_plans table with sql_plans_skip_builtin_db=OFF
--echo

# Using COUNT to avoid voluminous output for the sys.host_summary table

SELECT COUNT(*) FROM performance_schema.sql_plans;

--echo 
--echo -> Clean up all state changes
--echo

set @@GLOBAL.sql_plans_control=OFF_HARD;

drop table t1;
drop table t2;

# disconnect con1;

drop database test_db;

