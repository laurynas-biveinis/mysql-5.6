--disable_warnings
DROP TABLE IF EXISTS tbl1;
DROP DATABASE IF EXISTS cus_test;
CREATE DATABASE cus_test;
USE cus_test;
--enable_warnings

CREATE TABLE tbl1 (
    col1 INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    col2 INT(6) NOT NULL,
    col3 INT(6) NOT NULL,
    col4 INT(6) NOT NULL
);
CREATE TABLE tbl2 LIKE tbl1;

INSERT INTO tbl1 (col2, col3, col4) VALUES (2,3,4);
INSERT INTO tbl1 (col2, col3, col4) VALUES (3,4,5);
INSERT INTO tbl1 (col2, col3, col4) VALUES (4,5,6);

SET GLOBAL column_stats_control = ON;

# performance_schema_esms_by_all is OFF by default.
# enable it to populate performance_schema.events_statements_summary_by_all
SET @start_value = @@global.performance_schema_esms_by_all;
SET @@global.performance_schema_esms_by_all = ON;

UPDATE tbl1 SET col3 = 1 WHERE col2 IN (3, 17, 12);
UPDATE tbl2 SET col3 = 1 WHERE col1 > 0 AND (col2 < 0 OR (col3 > 0 AND col4 < 0));

# Verification of stats accumulated

--echo Number of distinct queries executed.
SELECT COUNT(DISTINCT SQL_ID) FROM performance_schema.column_statistics;

--vertical_results
--echo Unique column accesses per table instance per SQL_ID

SELECT SQL_ID, DIGEST_TEXT, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE
FROM performance_schema.column_statistics cs, performance_schema.events_statements_summary_by_all mt, performance_schema.sql_text st
WHERE TABLE_SCHEMA <> 'performance_schema' AND cs.SQL_ID = mt.DIGEST AND cs.SQL_ID = st.DIGEST
ORDER BY SQL_ID, DIGEST_TEXT, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE;

set global column_stats_control = OFF_HARD;

# set performance_schema_esms_by_all to original value
SET @@global.performance_schema_esms_by_all = @start_value;

DROP TABLE tbl1;
DROP TABLE tbl2;
DROP DATABASE cus_test;
