Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
# Range query, PRIMARY KEY
# forward column family + Ascending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# forward column family + Descending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# reverse column family + Ascending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# reverse column family + Descending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
# Range query, PRIMARY KEY
# forward column family + Ascending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# forward column family + Descending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5 FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# reverse column family + Ascending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	1	1	data12	1	1
1	5	1	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	1	1	data12	1	1
0	3	1	2	data13	1	1
0	4	1	2	data14	1	1
0	5	1	1	data15	1	1
0	6	1	1	data15	1	1
0	7	1	1	data15	1	1
1	2	1	1	data12	1	1
1	3	1	2	data13	1	1
1	4	1	2	data14	1	1
1	5	1	1	data15	1	1
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 ASC, id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type ASC, id1 ASC,
id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	version
0	2	0	1	data12
0	3	0	2	data13
0	4	0	2	data14
0	5	0	1	data15
0	6	0	1	data15
0	7	0	1	data15
1	2	0	1	data12
1	3	0	2	data13
1	4	0	2	data14
1	5	0	1	data15
2	1	0	1	data21
2	2	0	1	data22
2	3	0	1	data32
0	2	1	1	data12
0	3	1	2	data13
0	4	1	2	data14
0	5	1	1	data15
0	6	1	1	data15
0	7	1	1	data15
1	2	1	1	data12
1	3	1	2	data13
1	4	1	2	data14
1	5	1	1	data15
2	1	1	1	data21
2	2	1	1	data22
2	3	1	1	data32
0	2	2	1	data12
0	3	2	2	data13
0	4	2	2	data14
0	5	2	1	data15
0	6	2	1	data15
0	7	2	1	data15
1	2	2	1	data12
1	3	2	2	data13
1	4	2	2	data14
1	5	2	1	data15
2	1	2	1	data21
2	2	2	1	data22
2	3	2	1	data32
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
2	2	1	1	data22	1	1
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	2	1	data21	1	1
2	2	2	1	data22	1	1
2	3	2	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 ASC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	2	0	1	data12	1	1
0	3	0	2	data13	1	1
0	4	0	2	data14	1	1
0	5	0	1	data15	1	1
0	6	0	1	data15	1	1
0	7	0	1	data15	1	1
1	2	0	1	data12	1	1
1	3	0	2	data13	1	1
1	4	0	2	data14	1	1
1	5	0	1	data15	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# reverse column family + Descending
# Prefix queries
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	1	1	data15	1	1
1	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
4
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 1 AND visibility = 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND visibility = 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
1	5	1	1	data15	1	1
1	4	1	2	data14	1	1
1	3	1	2	data13	1	1
1	2	1	1	data12	1	1
0	7	1	1	data15	1	1
0	6	1	1	data15	1	1
0	5	1	1	data15	1	1
0	4	1	2	data14	1	1
0	3	1	2	data13	1	1
0	2	1	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
ROWS_READ
13
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND time = 1
ORDER BY id1 DESC, id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
ROWS_READ
39
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE time = 1
ORDER BY link_type DESC, id1 DESC,
id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	version
2	3	2	1	data32
2	2	2	1	data22
2	1	2	1	data21
1	5	2	1	data15
1	4	2	2	data14
1	3	2	2	data13
1	2	2	1	data12
0	7	2	1	data15
0	6	2	1	data15
0	5	2	1	data15
0	4	2	2	data14
0	3	2	2	data13
0	2	2	1	data12
2	3	1	1	data32
2	2	1	1	data22
2	1	1	1	data21
1	5	1	1	data15
1	4	1	2	data14
1	3	1	2	data13
1	2	1	1	data12
0	7	1	1	data15
0	6	1	1	data15
0	5	1	1	data15
0	4	1	2	data14
0	3	1	2	data13
0	2	1	1	data12
2	3	0	1	data32
2	2	0	1	data22
2	1	0	1	data21
1	5	0	1	data15
1	4	0	2	data14
1	3	0	2	data13
1	2	0	1	data12
0	7	0	1	data15
0	6	0	1	data15
0	5	0	1	data15
0	4	0	2	data14
0	3	0	2	data13
0	2	0	1	data12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Range queries
# > and >=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# < and <=
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 0
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 1
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 2
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
6
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
# Both > and <
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 4 AND id2 < 3
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
ROWS_READ
1
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 3 AND id2 < 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 3 AND id2 <= 4
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 1 AND id2 < 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
ROWS_READ
2
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 1 AND id2 <= 5
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 > 0 AND id2 <= 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 1 AND id1 = 2 AND id2 >= 0 AND id2 < 6
ORDER BY id2 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	1	1	data32	1	1
2	2	1	1	data22	1	1
2	1	1	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 > 1 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
ROWS_READ
3
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 2 AND id1 >= 2 and id1 < 100
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
2	3	2	1	data32	1	1
2	2	2	1	data22	1	1
2	1	2	1	data21	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 <= 1 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
ROWS_READ
10
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table5_rev FORCE INDEX (PRIMARY)
WHERE link_type = 0 AND id1 < 2 and id1 >= 0
ORDER BY id1 DESC LIMIT 1000;
id1	id2	link_type	visibility	data	TIME	version
1	5	0	1	data15	1	1
1	4	0	2	data14	1	1
1	3	0	2	data13	1	1
1	2	0	1	data12	1	1
0	7	0	1	data15	1	1
0	6	0	1	data15	1	1
0	5	0	1	data15	1	1
0	4	0	2	data14	1	1
0	3	0	2	data13	1	1
0	2	0	1	data12	1	1
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
