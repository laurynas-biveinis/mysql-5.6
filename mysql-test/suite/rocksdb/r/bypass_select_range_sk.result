Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
# Range query, SECONDARY KEY
# Reverse Column family + ascending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 ASC, link_type ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 ASC, link_type ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Reverse Column family + descending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 DESC, link_type DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 DESC, link_type DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# forward column family + ascending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 ASC, link_type ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 ASC, link_type ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# forward column family + descending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1 AND TIME=12
ORDER BY link_type DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 DESC, link_type DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY id1 DESC, link_type DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE id1 = 1
ORDER BY link_type DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
# Range query, SECONDARY KEY
# Reverse Column family + ascending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type ASC, id1 ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type ASC, id1 ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Reverse Column family + descending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type DESC, id1 DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type DESC, id1 DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# forward column family + ascending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 ASC, visibility ASC,
time ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type ASC, id1 ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type ASC, id1 ASC,
visibility ASC, time ASC,
id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
1	5	3	3	a12
1	6	3	4	a12
1	7	3	4	a12
2	5	3	4	a12
2	6	3	4	a12
2	7	3	4	a12
3	4	3	4	a12
3	5	3	4	a12
3	6	3	4	a12
2	5	4	4	a12
2	6	4	4	a12
2	7	4	4	a12
9	4	5	6	012345  
9	5	5	6	01234  
9	6	5	6	0123  
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 ASC, visibility ASC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
1	5	3	3	a12	12	125
1	1	3	4	a10	10	125
1	3	3	4	a11	11	125
1	4	3	4	a11	11	125
1	6	3	4	a12	12	125
1	7	3	4	a12	12	125
1	8	3	4	a13	13	125
1	9	3	4	a14	14	125
1	10	3	4	a15	15	125
2	1	3	4	a10	10	125
2	2	3	4	a10	10	125
2	3	3	4	a11	11	125
2	4	3	4	a11	11	125
2	5	3	4	a12	12	125
2	6	3	4	a12	12	125
2	7	3	4	a12	12	125
2	8	3	4	a13	13	125
2	9	3	4	a14	14	125
2	10	3	4	a15	15	125
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	9	3	4	a10	10	125
3	10	3	4	a10	10	125
3	7	3	4	a11	11	125
3	8	3	4	a11	11	125
3	4	3	4	a12	12	125
3	5	3	4	a12	12	125
3	6	3	4	a12	12	125
3	3	3	4	a13	13	125
3	2	3	4	a14	14	125
3	1	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME ASC, id2 ASC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# forward column family + descending
# prefix
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 0
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND TIME=12
ORDER BY id1 DESC, visibility DESC,
time DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type DESC, id1 DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
ROWS_READ
50
COVERED_SK_LOOKUP
50
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data
FROM link_table2 FORCE INDEX (id1_type)
WHERE TIME=12
ORDER BY link_type DESC, id1 DESC,
visibility DESC, time DESC,
id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data
9	6	5	6	0123  
9	5	5	6	01234  
9	4	5	6	012345  
2	7	4	4	a12
2	6	4	4	a12
2	5	4	4	a12
3	6	3	4	a12
3	5	3	4	a12
3	4	3	4	a12
2	7	3	4	a12
2	6	3	4	a12
2	5	3	4	a12
1	7	3	4	a12
1	6	3	4	a12
1	5	3	3	a12
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Range query
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND TIME = 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 3 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
5
COVERED_SK_LOOKUP
5
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 12
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
3
COVERED_SK_LOOKUP
3
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 9 AND TIME <= 11
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 10
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
ROWS_READ
1
COVERED_SK_LOOKUP
1
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME >= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND TIME > 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1 AND visibility = 4 AND
TIME >= 7 AND TIME <= 8
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 5 AND id1 = 1 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 1
ORDER BY visibility DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
ROWS_READ
30
COVERED_SK_LOOKUP
30
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3
ORDER BY id1 DESC, visibility DESC
LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
2	10	3	4	a15	15	125
2	9	3	4	a14	14	125
2	8	3	4	a13	13	125
2	7	3	4	a12	12	125
2	6	3	4	a12	12	125
2	5	3	4	a12	12	125
2	4	3	4	a11	11	125
2	3	3	4	a11	11	125
2	2	3	4	a10	10	125
2	1	3	4	a10	10	125
1	10	3	4	a15	15	125
1	9	3	4	a14	14	125
1	8	3	4	a13	13	125
1	7	3	4	a12	12	125
1	6	3	4	a12	12	125
1	4	3	4	a11	11	125
1	3	3	4	a11	11	125
1	1	3	4	a10	10	125
1	5	3	3	a12	12	125
1	2	3	3	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
7
COVERED_SK_LOOKUP
7
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
9
COVERED_SK_LOOKUP
9
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 15
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 10 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
ROWS_READ
8
COVERED_SK_LOOKUP
8
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME >= 9 AND TIME < 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
ROWS_READ
10
COVERED_SK_LOOKUP
10
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 16
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
3	1	3	4	a15	15	125
3	2	3	4	a14	14	125
3	3	3	4	a13	13	125
3	6	3	4	a12	12	125
3	5	3	4	a12	12	125
3	4	3	4	a12	12	125
3	8	3	4	a11	11	125
3	7	3	4	a11	11	125
3	10	3	4	a10	10	125
3	9	3	4	a10	10	125
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
# Invalid range
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 10 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
========== Verifying Bypass Query ==========
WITH BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
ROWS_READ
0
COVERED_SK_LOOKUP
0
include/assert.inc [Verify executed in bypass]
WITHOUT BYPASS:
SELECT /*+ bypass */ id1, id2, link_type, visibility, data, TIME, version
FROM link_table2 FORCE INDEX (id1_type)
WHERE link_type = 3 AND id1 = 3 AND visibility = 4 AND
TIME > 9 AND TIME <= 9
ORDER BY TIME DESC, id2 DESC LIMIT 0, 1000;
id1	id2	link_type	visibility	data	TIME	version
include/assert.inc [Verify not executed in bypass]
include/assert.inc [Verify bypass and regular query return same number of rows]
include/assert.inc [Verify bypass reads no more than regular query]
include/assert.inc [Verify bypass query uses covering SK]
