clear out history before test
set global rocksdb_bulk_load_history_size=0;
set global rocksdb_bulk_load_history_size=10;
CREATE TABLE t1(c1 INT primary key, c2 int, index k2(c2));
CREATE TABLE t2(c1 INT primary key, c2 int, index k2(c2));
CREATE TABLE t3(c1 INT primary key, c2 int, index k2(c2));

bulk load history for active bulk loads

SET rocksdb_bulk_load_allow_sk=1;
SET rocksdb_bulk_load=1;
INSERT INTO t1 VALUES(1, 1);
INSERT INTO t1 VALUES(2, 2);
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	ACTIVE	0	1	test.t1	0
INSERT INTO t2 VALUES(2, 2);
INSERT INTO t3 VALUES(2, 2);
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	ACTIVE	0	3	test.t1,test.t2,test.t3	0
SET rocksdb_bulk_load=0;
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	COMPLETED	0	3	test.t1,test.t2,test.t3	6

bulk load history for failed bulk loads

SET rocksdb_bulk_load_allow_sk=1;
SET rocksdb_bulk_load=1;
INSERT INTO t1 VALUES(1, 1), (3, 3);
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	COMPLETED	0	3	test.t1,test.t2,test.t3	6
SST_FILE_WRITER	ACTIVE	0	1	test.t1	0
SET rocksdb_bulk_load=0;
ERROR HY000: Rows inserted during bulk load must not overlap existing rows
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	COMPLETED	0	3	test.t1,test.t2,test.t3	6
SST_FILE_WRITER	FAILED	504	1	test.t1	0

bulk load history for aborted bulk loads

SET rocksdb_bulk_load_allow_sk=1;
SET rocksdb_bulk_load=1;
INSERT INTO t2 VALUES(10, 10);
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	COMPLETED	0	3	test.t1,test.t2,test.t3	6
SST_FILE_WRITER	FAILED	504	1	test.t1	0
SST_FILE_WRITER	ACTIVE	0	1	test.t2	0
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	COMPLETED	0	3	test.t1,test.t2,test.t3	6
SST_FILE_WRITER	FAILED	504	1	test.t1	0
SST_FILE_WRITER	ABORTED	1	1	test.t2	0

set bulk load history size
should remove old records when record count exceeds history size
set global rocksdb_bulk_load_history_size=2;
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	FAILED	504	1	test.t1	0
SST_FILE_WRITER	ABORTED	1	1	test.t2	0

set bulk load history size 0 should clear all completed records
SET rocksdb_bulk_load_allow_sk=1;
SET rocksdb_bulk_load=1;
INSERT INTO t3 VALUES(10, 10);
active records should not be cleared out
set global rocksdb_bulk_load_history_size=0;
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SST_FILE_WRITER	ACTIVE	0	1	test.t3	0
SET rocksdb_bulk_load=0;
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
SET global rocksdb_bulk_load_history_size=10;

test for bulk load triggered by alter table

bulk load is not used, sst_files should be 0
ALTER TABLE t1 ADD column c3 int default 42;
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, TABLES, SST_FILES from information_schema.rocksdb_bulk_load_history;
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	TABLES	SST_FILES
DDL	COMPLETED	0	1	test.t1	0
bulk load is used, sst_files should be none 0
SET rocksdb_bulk_load_allow_sk=1;
SET rocksdb_bulk_load=1;
ALTER TABLE t2 ADD column c3 int default 42;
select * from t2;
c1	c2	c3
2	2	42
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, SST_FILES from information_schema.rocksdb_bulk_load_history where TABLES like '%test.t2';
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	SST_FILES
DDL	COMPLETED	0	2	2
SET rocksdb_bulk_load=0;
select TYPE, STATUS, RETURN_CODE, TABLE_COUNT, SST_FILES from information_schema.rocksdb_bulk_load_history where TABLES like '%test.t2';
TYPE	STATUS	RETURN_CODE	TABLE_COUNT	SST_FILES
DDL	COMPLETED	0	2	2
set global rocksdb_bulk_load_history_size=default;
DROP TABLE t1,t2,t3;
