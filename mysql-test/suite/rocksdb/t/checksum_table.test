--source include/have_rocksdb.inc

#
# CHECKSUM TABLE statements for standard CHECKSUM properties.
# Live checksums are covered in checksum_table_live.test
#

--disable_warnings
DROP TABLE IF EXISTS t1,t2;
--enable_warnings

CREATE TABLE t1 (a INT PRIMARY KEY, b CHAR(8)) ENGINE=rocksdb charset=latin1 CHECKSUM=0;
INSERT INTO t1 (a,b) VALUES (1,'a'),(2,'b');

CREATE TABLE t2 (a INT PRIMARY KEY, b CHAR(8)) ENGINE=rocksdb charset=latin1 CHECKSUM=0;

CHECKSUM TABLE t1;
CHECKSUM TABLE t2, t1;
CHECKSUM TABLE t1, t2 QUICK;
CHECKSUM TABLE t1, t2 EXTENDED;

DROP TABLE t1, t2;

--echo #
--echo # Issue #110: SQL command checksum returns inconsistent result
--echo #
create table t1 (pk int primary key, col1 varchar(10)) engine=rocksdb charset=latin1;
insert into t1 values (2,'fooo');
insert into t1 values (1,NULL);
checksum table t1;
checksum table t1;
select * from t1 where pk=2;
checksum table t1;
checksum table t1;
flush tables;
checksum table t1;
checksum table t1;

drop table t1;

--echo #
--echo #  The following test is about making sure MyRocks CHECKSUM TABLE
--echo #  values are the same as with InnoDB.
--echo #  If you see checksum values changed, make sure their counterparts
--echo #  in suite/innodb/r/checksum-matches-myrocks.result match.
--echo #

create table t1 (pk int primary key, col1 varchar(10)) engine=rocksdb charset=latin1;
insert into t1 values (2,'fooo');
insert into t1 values (1,NULL);
checksum table t1;
drop table t1;

create table t1 (
  pk bigint unsigned primary key,
  col1 varchar(10),
  col2 tinyint,
  col3 double
) engine=rocksdb charset=latin1;

checksum table t1;

insert into t1 values (1, NULL,  NULL, NULL);
insert into t1 values (2, 'foo', NULL, NULL);
checksum table t1;
checksum table t1 (pk);

insert into t1 values (3, NULL,  123,  NULL);
insert into t1 values (4, NULL,  NULL, 2.78);
checksum table t1;

insert into t1 values (5, 'xxxYYYzzzT',  NULL, 2.78);
insert into t1 values (6, '',            NULL, 2.78);
checksum table t1;
let $t1_chksum = query_get_value(checksum table t1, Checksum, 1);

--echo The following two should match because the select list order doesn't
--echo actually affect the CRC32 order: it merely sets bits in the read_set.
--echo The columns will still be processed in table schema order.
checksum table t1 (pk, col1);
checksum table t1 (col1, pk);
checksum table t1 (pk, col1, col2);
checksum table t1 (pk, col1, col2, col3);
# Define variable for checksum query to workaround MTR parsing due to comma.
let $checksum_all_cols_stmt = checksum table t1 (pk, col1, col2, col3);
let $t1_chksum_individually = query_get_value("$checksum_all_cols_stmt", Checksum, 1);

--echo Compare that checksumming the table wholesale and individually yields
--echo the same result.
assert($t1_chksum_individually == $t1_chksum);

--echo Negative tests
--echo --------------
--error ER_PARSE_ERROR
checksum table t1 ();
--echo Can't use * expression in select list.
--error ER_PARSE_ERROR
checksum table t1 (*);
--echo Can't checksum multiple tables with select-list.
--error ER_PARSE_ERROR
checksum table t1 (col1), t2;
--error ER_PARSE_ERROR
checksum table t1, t2 (fake_col);
--echo Can't use expressions in select list.
--error ER_PARSE_ERROR
checksum table t1 (pk + 1, col1);
--error ER_BAD_FIELD_ERROR
checksum table t1 (pk, z);
drop table t1;
