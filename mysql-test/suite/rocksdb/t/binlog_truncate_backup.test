#
# verify that when a binlog gets truncated, a backup gets stored in the tmpdir
#
--source include/not_valgrind.inc
--source include/not_asan.inc
--source include/have_log_bin.inc
--source include/have_debug.inc
--source include/have_rocksdb.inc
--source include/have_gtid.inc

CALL mtr.add_suppression("Taking backup from .*");
CALL mtr.add_suppression("Error reading GTIDs from binary log");
CALL mtr.add_suppression("Attempting backtrace");

CREATE TABLE t1(c1 INT) ENGINE=rocksdb;
INSERT INTO t1 VALUES(1);

# Simulate after writing to binlog, but before commiting to engine
# On restart the trx will be rolled back. binlog will be truncated and a backup
# will be taken before truncating the binlog
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--echo # Crash right after flushing binary log
SET SESSION DEBUG="+d,crash_after_flush_binlog";
# 2013 - CR_SERVER_LOST
--error CR_SERVER_LOST
INSERT INTO t1 VALUES(2);
--source include/wait_until_disconnected.inc

--enable_reconnect
--echo # Restart the master server
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo # Verify that the trx was rolled back
--let $assert_text = t1 should have 1 row
--let $assert_cond = [SELECT COUNT(*) from t1] = 1
--source include/assert.inc

--echo
--echo # Verify that binlog backup was taken before truncating
--let $MY_TMPDIR= `select @@tmpdir`
--exec ls -l $MY_TMPDIR/binlog_backup.bak | wc -l

# Check if crashed binlog is backed up even if there is no truncation
INSERT INTO t1 VALUES(100);
FLUSH ENGINE LOGS;

# Crash after insert is executed successfully
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--error CR_SERVER_LOST
SHUTDOWN 127;
--source include/wait_until_disconnected.inc

--enable_reconnect
--echo # Restart the master server
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo # Verify that the insert is still present
--let $assert_text = t1 row with value 100
--let $assert_cond = [SELECT COUNT(*) from t1 WHERE c1 = 100] = 1
--source include/assert.inc

--echo
--echo # Verify that binlog backup was taken even where there is no truncation
--let $MY_TMPDIR= `select @@tmpdir`
--exec ls -l $MY_TMPDIR/binlog_backup.bak | wc -l

# Cleanup
DROP TABLE t1;
