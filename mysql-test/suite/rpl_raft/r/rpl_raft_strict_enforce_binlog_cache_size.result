include/raft_3_node.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
include/rpl_connect.inc [creating server_4]
include/rpl_connect.inc [creating server_5]
show status like 'rpl_raft_role';
Variable_name	Value
Rpl_raft_role	LEADER
show status like 'rpl_raft_role';
Variable_name	Value
Rpl_raft_role	FOLLOWER
reset master;
show status like 'rpl_raft_role';
Variable_name	Value
Rpl_raft_role	FOLLOWER
reset master;
set @max_binlog_cache_size_save = @@global.max_binlog_cache_size;
set @binlog_cache_size_save = @@global.binlog_cache_size;
set @rpl_raft_disable_failure_detector_save = @@global.rpl_raft_disable_failure_detector;
set @strict_enforce_binlog_cache_size_save = @@global.strict_enforce_binlog_cache_size;
set @max_binlog_cache_overhead_size_save = @@global.max_binlog_cache_overhead_size;
set @@global.binlog_cache_size = 8192;
set @@global.max_binlog_cache_size = 16384;
set @@global.strict_enforce_binlog_cache_size = 1;
set @@global.max_binlog_cache_overhead_size = 1000;
set @@global.rpl_raft_disable_failure_detector = 1;
set @rpl_raft_disable_failure_detector_save = @@global.rpl_raft_disable_failure_detector;
set @@global.rpl_raft_disable_failure_detector = 1;
set @rpl_raft_disable_failure_detector_save = @@global.rpl_raft_disable_failure_detector;
set @@global.rpl_raft_disable_failure_detector = 1;
# Create a table and insert a transaction where the size exceeds max_binlog_cache_size
create table tbl (id int primary key auto_increment, data longtext not null) engine = innodb;
# This should fail before entering ordered_commit() with @@global.strict_enforce_binlog_cache_size on
insert into tbl(id, data) values (null, repeat('x', 20000));
ERROR HY000: Multi-statement transaction required more than 'max_binlog_cache_size' bytes of storage; increase this mysqld variable and try again
# Table should be empty
select count(*) from tbl;
count(*)
0
# Now test a case where we have a transaction that fits under max_binlog_cache_size and proceeds
# inside ordered_commit() but exceeds cache size when additional GTID and metadata is added (~105 bytes)
# With @global.max_binlog_cache_overhead_size configured, we should not fail.
insert into tbl(id, data) values (null, repeat('x', 16198));
# Table should have 1 record
select count(*) from tbl;
count(*)
1
# Insert a valid row that fits within cache size should succeed
insert into tbl(id, data) values (null, 'x');
# Table should have 2 records
select count(*) from tbl;
count(*)
2
drop table tbl;
set @@global.max_binlog_cache_size = @max_binlog_cache_size_save;
set @@global.binlog_cache_size = @binlog_cache_size_save;
set @@global.rpl_raft_disable_failure_detector = @rpl_raft_disable_failure_detector_save;
set @@global.strict_enforce_binlog_cache_size = @strict_enforce_binlog_cache_size_save;
set @@global.max_binlog_cache_overhead_size = @max_binlog_cache_overhead_size_save;
set @@global.rpl_raft_disable_failure_detector = @rpl_raft_disable_failure_detector_save;
set @@global.rpl_raft_disable_failure_detector = @rpl_raft_disable_failure_detector_save;
include/rpl_end.inc
