source include/have_debug.inc;
let $rpl_extra_connections_per_server= 3;
source ../include/raft_3_node.inc;

# This test ensures that overlapping runs between rli_relay_log_raft_reset() and purge_logs()
# does not crash the server.

connection server_1;
create table t1 (a int primary key);

echo "Case 1: PURGE RAFT LOGS BEFORE <TIME>";

echo "Inserting rows into t1 on leader: server_1";
let $j = 1;
disable_query_log;
while ($j <= 5)
{
  connection server_1;
  eval insert into t1 values($j);
  let $sync_slave_connection= server_2;
  source include/sync_slave_sql_with_master.inc;
  let $sync_slave_connection= server_3;
  source include/sync_slave_sql_with_master.inc;

  --inc $j
}
enable_query_log;

connection server_2;
# Get UUID for server_2
let $server2_uuid =
  `SELECT VARIABLE_VALUE
   FROM performance_schema.global_status
   WHERE VARIABLE_NAME = "Rpl_raft_peer_uuid"`;

# Run purge raft logs but stop right after we deleted the original index file and just before
# renaming the modified index file to the original index file. Then issue a change leadership
# so that we old leader will invoke a rli_relay_log_raft_reset() as it becomes follower.
# This method will recreate the index file. Without the fix of acquiring an index lock before
# running rli_relay_log_raft_reset(), the original index file will be recreated and
# purge_logs() will abort the server when it sees that the rename fails because the file
# already exists.

connection server_1;
set debug_sync='rebuild_index_after_delete SIGNAL rebuild_reached WAIT_FOR rebuild_continue';
send PURGE RAFT LOGS BEFORE NOW();

connection server_1_1;
set debug_sync='now WAIT_FOR rebuild_reached';
replace_result $server2_uuid server2_uuid;
send_eval SET @@GLOBAL.RPL_RAFT_NEW_LEADER_UUID = "$server2_uuid";

connection server_1_2;
sleep 3;
set debug_sync='now SIGNAL rebuild_continue';

connection server_1;
reap;

connection server_1_1;
reap;

connection server_2;
echo "Moving leadership back to server_1";
sleep 3;
let $rpl_raft_leader_number= 1;
source ../include/raft_promote_to_leader.inc;

echo "Case 2: PURGE RAFT LOGS TO <LOG>";

echo "Inserting rows into t1 on leader: server_1";
disable_query_log;
while ($j <= 10)
{
  connection server_1;
  eval insert into t1 values($j);
  let $sync_slave_connection= server_2;
  source include/sync_slave_sql_with_master.inc;
  let $sync_slave_connection= server_3;
  source include/sync_slave_sql_with_master.inc;

  --inc $j
}
enable_query_log;

connection server_1;
source include/show_raft_logs.inc;
let $raft_log_name= query_get_value(SHOW MASTER STATUS, File, 1);
set debug_sync='rebuild_index_after_delete SIGNAL rebuild_reached WAIT_FOR rebuild_continue';
send_eval purge raft logs to '$raft_log_name';

connection server_1_1;
set debug_sync='now WAIT_FOR rebuild_reached';
replace_result $server2_uuid server2_uuid;
send_eval SET @@GLOBAL.RPL_RAFT_NEW_LEADER_UUID = "$server2_uuid";

connection server_1_2;
sleep 3;
set debug_sync='now SIGNAL rebuild_continue';

connection server_1;
reap;

connection server_1_1;
reap;

connection server_2;
echo "Moving leadership back to server_1";
sleep 3;
let $rpl_raft_leader_number= 1;
source ../include/raft_promote_to_leader.inc;

connection server_1;
drop table t1;

let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;

source include/rpl_end.inc;
