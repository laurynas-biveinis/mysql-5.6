source ../include/raft_3_node.inc;

call mtr.add_suppression("Out of order opid found");

connection server_1;
create table t1(a int primary key) engine = innodb;
let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;

# stop sql thread on server2, we'll 1st reorder some trx and then start it again
connection server_2;
stop slave sql_thread;

# execute some transactions and rotate the file
connection server_1;
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
flush binary logs;

let $sync_slave_connection= server_2;
source include/sync_slave_io_with_master.inc;

# mess with raft log on server2 and reorder the last two trxs
connection server_2;
let $MYSQLD_DATADIR = `select @@datadir`;
let $raft_log = query_get_value("SHOW SLAVE STATUS", "Relay_Log_File", 1);

# store offsets of last 3 Xid events in a file
exec $MYSQL_BINLOG -vvv $MYSQLD_DATADIR/$raft_log | grep Xid | tr -s [:blank:] | cut -d' ' -f7 | tail -n3 > $MYSQLD_DATADIR/offsets;

connection server_1;
set @sql_log_bin=0;
create table offsets(a int);
replace_result $MYSQLD_DATADIR MYSQLD_DATADIR;
eval load data local infile '$MYSQLD_DATADIR/offsets' into table offsets FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n';
set @sql_log_bin=1;

let $offset1= `select a from offsets limit 1`;
let $offset2= `select a from offsets limit 1, 1`;
let $size1= `select (select a from offsets limit 1, 1) - (select a from offsets limit 0, 1)`;
let $size2= `select (select a from offsets limit 2, 1) - (select a from offsets limit 1, 1)`;

set @sql_log_bin=0;
drop table offsets;
set @sql_log_bin=1;

# make a copy of orig raft log file
exec cp $MYSQLD_DATADIR/$raft_log $MYSQLD_DATADIR/orig_$raft_log;

# create new raft log with last two trx out of order
exec dd if=$MYSQLD_DATADIR/$raft_log of=$MYSQLD_DATADIR/prefix_raft_log skip=0 count=$offset1 iflag=skip_bytes,count_bytes;
exec dd if=$MYSQLD_DATADIR/$raft_log of=$MYSQLD_DATADIR/penultimate_trx_raft_log skip=$offset1 count=$size1 iflag=skip_bytes,count_bytes;
exec dd if=$MYSQLD_DATADIR/$raft_log of=$MYSQLD_DATADIR/last_trx_raft_log skip=$offset2 count=$size2 iflag=skip_bytes,count_bytes;
exec cat $MYSQLD_DATADIR/prefix_raft_log $MYSQLD_DATADIR/last_trx_raft_log $MYSQLD_DATADIR/penultimate_trx_raft_log > $MYSQLD_DATADIR/$raft_log;

# start sql thread
connection server_2;
source include/start_slave_sql.inc;

# sql thread should fail
let $slave_sql_errno= convert_error(ER_SLAVE_RELAY_LOG_READ_FAILURE);
source include/wait_for_slave_sql_error.inc;

# replace with original raft log and start again
exec mv $MYSQLD_DATADIR/orig_$raft_log $MYSQLD_DATADIR/$raft_log;

let $rpl_server_number= 2;
source include/rpl_stop_server.inc;

connection server_1;
flush binary logs;

connection server_2;
let $rpl_server_number= 2;
let $rpl_server_parameters=--skip-slave-start=1;
source include/rpl_start_server.inc;

connection server_2;
source include/start_slave.inc;

remove_file $MYSQLD_DATADIR/offsets;
remove_file $MYSQLD_DATADIR/prefix_raft_log;
remove_file $MYSQLD_DATADIR/penultimate_trx_raft_log;
remove_file $MYSQLD_DATADIR/last_trx_raft_log;

# cleanup
connection server_1;
drop table t1;
let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;


source include/rpl_end.inc;
