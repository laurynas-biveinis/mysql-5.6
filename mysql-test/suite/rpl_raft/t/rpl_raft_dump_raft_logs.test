source ../include/raft_3_node.inc;
source include/have_debug_sync.inc;

# Connect server 4 and 5 using COM_BINLOG_DUMP_GTID
# server4 will tail the leader
connection server_4;
RESET MASTER;
RESET REPLICA;
SET @@GLOBAL.ENABLE_RAFT_PLUGIN = 0;
replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1;
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST = '::1', SOURCE_PORT = $SERVER_MYPORT_1, SOURCE_USER = 'root',  SOURCE_CONNECT_RETRY = 1, SOURCE_AUTO_POSITION = 1;
START REPLICA;

# server5 will tail a follower
connection server_5;
RESET MASTER;
RESET REPLICA;
SET @@GLOBAL.ENABLE_RAFT_PLUGIN = 0;
replace_result $SERVER_MYPORT_2 SERVER_MYPORT_2;
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST = '::1', SOURCE_PORT = $SERVER_MYPORT_2, SOURCE_USER = 'root',  SOURCE_CONNECT_RETRY = 1, SOURCE_AUTO_POSITION = 1;
START REPLICA;

# Check raft roles, 4 and 5 should be empty
connection server_1;
show status like 'rpl_raft_role';
connection server_2;
show status like 'rpl_raft_role';
connection server_3;
show status like 'rpl_raft_role';
connection server_4;
show status like 'rpl_raft_role';
connection server_5;
show status like 'rpl_raft_role';

# Create a schema and sync it across replicas
connection server_1;
create table t1 (a int primary key) engine = innodb;

let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

# Check if server 4 and 5 are tailing raft logs
connection server_4;
let $logname= query_get_value(SHOW REPLICA STATUS, Relay_Source_Log_File, 1);
replace_result $logname LOGNAME;
eval SELECT "$logname" LIKE "binary-logs%";
connection server_5;
let $logname= query_get_value(SHOW REPLICA STATUS, Relay_Source_Log_File, 1);
replace_result $logname LOGNAME;
eval SELECT "$logname" LIKE "binary-logs%";

# Execute a regular DML (insert)
connection server_1;
insert into t1 values(1);
let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

connection server_2;
select * from t1;
connection server_3;
select * from t1;
connection server_4;
select * from t1;
connection server_5;
select * from t1;

# Transfer leadership from server1 to server2
let $rpl_raft_leader_number= 2;
source ../include/raft_promote_to_leader.inc;

# Execute some more trxs
connection server_2;
let $wait_condition= select @@global.read_only = 0;
source include/wait_condition.inc;
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
let $sync_slave_connection= server_1;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

connection server_1;
select * from t1;
connection server_3;
select * from t1;
connection server_4;
select * from t1;
connection server_5;
select * from t1;

# Check if server 4 and 5 are still tailing raft logs post election
connection server_4;
let $logname= query_get_value(SHOW REPLICA STATUS, Relay_Source_Log_File, 1);
replace_result $logname LOGNAME;
eval SELECT "$logname" LIKE "binary-logs%";
connection server_5;
let $logname= query_get_value(SHOW REPLICA STATUS, Relay_Source_Log_File, 1);
replace_result $logname LOGNAME;
eval SELECT "$logname" LIKE "binary-logs%";

# Transfer leadership from server2 to server1
let $rpl_raft_leader_number= 1;
source ../include/raft_promote_to_leader.inc;

# Check if binlog flushing works as expected
connection server_1;
let $wait_condition= select @@global.read_only = 0;
source include/wait_condition.inc;
flush binary logs;
insert into t1 values(5);
let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

connection server_2;
select * from t1;
connection server_3;
select * from t1;
connection server_4;
select * from t1;
connection server_5;
select * from t1;

# Check interaction of dump logs with purge
connection server_4;
let $logname= query_get_value(SHOW REPLICA STATUS, Relay_Source_Log_File, 1);
connection server_1;
set @@global.debug='+d,dump_wait_before_find_next_log';
insert into t1 values(6);
insert into t1 values(7);
flush binary logs;
insert into t1 values(8);
insert into t1 values(9);
flush binary logs;
insert into t1 values(10);
insert into t1 values(11);
set debug_sync= 'now wait_for signal.reached';
replace_result $logname LOGNAME;
eval purge raft logs to '$logname';
set debug_sync= 'now signal signal.done';
set @@global.debug='-d,dump_wait_before_find_next_log';
let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

connection server_2;
select * from t1;
connection server_3;
select * from t1;
connection server_4;
select * from t1;
connection server_5;
select * from t1;


# Check if clean restart affects dump threads
connection server_2;
source include/stop_slave.inc;
let $rpl_server_number= 2;
source include/rpl_restart_server.inc;

connection server_1;
let $rpl_server_number= 1;
source include/rpl_restart_server.inc;

# We need to sleep for at least one heartbeat interval after restarting the
# server before we can promote to it because the leader would have failed
# heartbeats while it's restarting and we will fail to promote if there are
# recent failed rpcs.
sleep 1;

let $rpl_raft_leader_number= 1;
source ../include/raft_promote_to_leader.inc;

disable_warnings;
connection server_4;
START REPLICA IO_THREAD;
connection server_5;
START REPLICA IO_THREAD;
enable_warnings;

connection server_1;
let $wait_condition= select @@global.read_only = 0;
source include/wait_condition.inc;
insert into t1 values(12);
let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

connection server_2;
select * from t1;
connection server_3;
select * from t1;
connection server_4;
select * from t1;
connection server_5;
select * from t1;

--disable_query_log
connection server_1;
call mtr.add_suppression("Slave has more GTIDs than the master has, using the master's SERVER_UUID");
--enable_query_log

# Cleanup
connection server_1;
drop table t1;

let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_4;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_5;
source include/sync_slave_sql_with_master.inc;

connection server_4;
stop replica;
reset replica all;
connection server_5;
stop replica;
reset replica all;

source include/rpl_end.inc;
