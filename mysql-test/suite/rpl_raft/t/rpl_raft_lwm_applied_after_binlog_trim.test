source ../include/raft_3_node.inc;

connection server_1;
create table t1 (a int primary key) engine = innodb;
insert into t1 values(1);
insert into t1 values(2);
flush binary logs;
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
insert into t1 values(6);
insert into t1 values(7);
insert into t1 values(8);
insert into t1 values(9);

let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;

connection server_2;
select * from t1;

connection server_3;
select * from t1;

echo "Trimming last raft log in server_2";
connection server_2;
flush logs;

let $rowno= 1;
let $do_loop= 1;
while ($do_loop)
{
  let $file= query_get_value("SHOW RAFT LOGS", "Log_name", $rowno);
  let $pos= query_get_value("SHOW RAFT LOGS", "File_size", $rowno);
  if ($file == No such row)
  {
    let $do_loop= 0;
  }
  if ($do_loop)
  {
    let $last_file= $file;
    let $last_pos= $pos;
  }
  inc $rowno;
}

set @@global.rpl_raft_allow_start_election = 0;
let $server2_datadir = `select @@datadir`;
let $half = `select ROUND($last_pos / 2)`;
exec truncate -s $half $server2_datadir/$last_file;
show status like 'Rpl_raft_slave_low_water_mark';

echo "Sending kill -STOP to server_1";
connection server_1;
echo "Stopping server_1";
let $server1_pid_file= `select @@global.pid_file`;
exec kill -STOP `cat $server1_pid_file`;

echo "Sending kill -STOP to server_3";
connection server_3;
set @@global.rpl_raft_allow_start_election = 0;
echo "Stopping server_3";
let $server3_pid_file= `select @@global.pid_file`;
exec kill -STOP `cat $server3_pid_file`;

echo "Force restarting server_2";
connection server_2;
let $rpl_server_number = 2;
let $rpl_force_stop = 1;
let $rpl_skip_election_on_startup = 1;
source include/rpl_restart_server.inc;
set @@global.rpl_raft_reject_append_entries = 1;

echo "Sending kill -CONT to server_1 and server_3";
exec kill -CONT `cat $server1_pid_file`;
exec kill -CONT `cat $server3_pid_file`;

echo "Waiting for LWM to be populated on server_2";
connection server_2;
#let $status_var_value= query_get_value(SHOW STATUS LIKE 'Rpl_raft_slave_low_water_mark', Value, 1);
let $status_var_value= 0:0;
let $status_var= Rpl_raft_slave_low_water_mark;
let $status_var_comparsion= !=;
let $status_val_not_number= 1;
source include/wait_for_status_var.inc;

echo "Allowing append entries RPC and waiting for SQL thread to start on server_2";
set @@global.rpl_raft_reject_append_entries = 0;
source include/wait_for_slave_sql_to_start.inc;

echo "Executing some more trxs on leader";
connection server_1;
insert into t1 values(10);
insert into t1 values(11);

let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;

echo "Checking out of order transactions after catching up server_2 with leader";
connection server_2;
show status like 'Rpl_raft_slave_num_out_of_order_trxs';
select * from t1;

connection server_3;
select * from t1;

--disable_query_log
connection server_1;
call mtr.add_suppression("Error in Log_event::read_log_event()");
call mtr.add_suppression("Error reading GTIDs from binary log");
call mtr.add_suppression("Engine has seen trxs till file");
call mtr.add_suppression("Forcing raft after_commit hook for opid");
--enable_query_log

# cleanup
connection server_2;
set @@global.rpl_raft_allow_start_election = 1;

connection server_3;
set @@global.rpl_raft_allow_start_election = 1;

connection server_1;
drop table t1;

let $sync_slave_connection= server_2;
source include/sync_slave_sql_with_master.inc;
let $sync_slave_connection= server_3;
source include/sync_slave_sql_with_master.inc;

source include/rpl_end.inc;
