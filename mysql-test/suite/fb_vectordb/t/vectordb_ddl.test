disable_query_log;
disable_warnings;
DROP TABLE IF EXISTS t1;
enable_warnings;
enable_query_log;

source ../include/init_ivf.inc;

# success case
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'flat'
);

SHOW CREATE TABLE t1;

SELECT INDEX_TYPE, DIMENSION, NTOTAL, HIT FROM INFORMATION_SCHEMA.ROCKSDB_VECTOR_INDEX WHERE TABLE_NAME = 't1';

insert into t1 values (1, '[1,2,3,0]'), (2, '[2,22,31,0]');
# NTOTAL and HIT are populated after query
select id, fb_vector_l2(vector1, '[10, 6, 5]') as dis from t1 order by dis limit 10;

SELECT INDEX_TYPE, DIMENSION, NTOTAL, HIT FROM INFORMATION_SCHEMA.ROCKSDB_VECTOR_INDEX WHERE TABLE_NAME = 't1';

drop table t1;

SELECT INDEX_TYPE FROM INFORMATION_SCHEMA.ROCKSDB_VECTOR_INDEX WHERE TABLE_NAME = 't1';

echo error case vector index column requires dimension;
error ER_WRONG_ARGUMENTS;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'flat'
);

echo error case, vector index is not allowed on ttl table;
error ER_GET_ERRNO;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'flat'
) COMMENT "ttl_duration=3600;";

# ivf test cases

# quantizer size 4
insert into VECTORDB_DATA values ('id1', 'metadata', 0, JSON_OBJECT('version', 1, 'nlist', 1)), ('id1', 'quantizer', 0, '[0, 0, 0, 0]');
# invalid version number
insert into VECTORDB_DATA values ('id2', 'metadata', 0, '{"version": 2}'), ('id2', 'quantizer', 0, '[0, 0, 0, 0]');

# success case.
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'ivfflat' FB_VECTOR_TRAINED_INDEX_TABLE 'VECTORDB_DATA' FB_VECTOR_TRAINED_INDEX_ID 'id1'
);

SELECT INDEX_TYPE, DIMENSION, NTOTAL, HIT FROM INFORMATION_SCHEMA.ROCKSDB_VECTOR_INDEX WHERE TABLE_NAME = 't1';

drop table t1;

echo error case, ivf index require trained index table;
error ER_WRONG_ARGUMENTS;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'ivfflat'
);

echo error case, ivf index require valid trained index table;
error ER_COMMAND_SERVICE_BACKEND_FAILED;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'ivfflat' FB_VECTOR_TRAINED_INDEX_TABLE 'VECTORDB_DATA2' FB_VECTOR_TRAINED_INDEX_ID 'id1'
);

echo error case, ivf index require valid trained index id;
error ER_GET_ERRNO;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'ivfflat' FB_VECTOR_TRAINED_INDEX_TABLE 'VECTORDB_DATA' FB_VECTOR_TRAINED_INDEX_ID 'id100'
);

echo error case, ivf index require valid version number;
error ER_GET_ERRNO;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 4,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'ivfflat' FB_VECTOR_TRAINED_INDEX_TABLE 'VECTORDB_DATA' FB_VECTOR_TRAINED_INDEX_ID 'id2'
);

echo error case, quantizer size does not match dimension;
error ER_GET_ERRNO;
CREATE TABLE t1 (
  id BIGINT NOT NULL PRIMARY KEY,
  vector1 JSON NOT NULL fb_vector_dimension 8,
  INDEX vector_key_1(vector1) FB_VECTOR_INDEX_TYPE 'ivfflat' FB_VECTOR_TRAINED_INDEX_TABLE 'VECTORDB_DATA' FB_VECTOR_TRAINED_INDEX_ID 'id1'
);

source ../include/cleanup_ivf.inc;
