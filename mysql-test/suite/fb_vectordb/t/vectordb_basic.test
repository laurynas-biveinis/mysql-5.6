disable_query_log;
disable_warnings;
DROP TABLE IF EXISTS t1;
enable_warnings;
enable_query_log;

echo;
echo TEST CASE basic distance calculation;
echo;
# same vector, should return 0
select FB_VECTOR_L2('[1, 2, 3]', '[1, 2, 3]') as v1;
# vector of same length, different length
select FB_VECTOR_L2('[1, 2, 3]', '[2, 3, 5]') as v1, FB_VECTOR_L2('[1, 2, 3]', '[2]') as v2, FB_VECTOR_L2('[1]', '[2, 3, 5]') as v3;
# ip
select FB_VECTOR_IP('[1, 2, 3]', '[1, 2, 3]') as v1;
select FB_VECTOR_IP('[1, 2, 3]', '[2, 3, 5]') as v1;
# cosine
select FB_VECTOR_IP(FB_VECTOR_NORMALIZE_L2('[1, 2, 3]'), FB_VECTOR_NORMALIZE_L2('[1, 2, 3]')) as v1;
select FB_VECTOR_IP(FB_VECTOR_NORMALIZE_L2('[1, 2, 3]'), FB_VECTOR_NORMALIZE_L2('[2, 3, 5]')) as v1;
select FB_VECTOR_IP(FB_VECTOR_NORMALIZE_L2('[5, 0]'), FB_VECTOR_NORMALIZE_L2('[2, 0]')) v1, FB_VECTOR_IP(FB_VECTOR_NORMALIZE_L2('[5, 0]'), FB_VECTOR_NORMALIZE_L2('[0, 2]')) v2;
# vector normalize
select FB_VECTOR_NORMALIZE_L2('[0, 0]') v1, FB_VECTOR_NORMALIZE_L2('[1, 2, 3]') v2, FB_VECTOR_NORMALIZE_L2('[1, 1, 1, 1]') v3;

echo;
echo TEST CASE basic error handling;
echo;
error ER_INVALID_JSON_TEXT_IN_PARAM;
select FB_VECTOR_L2('[1, 2, 3]', 'abc') as v1;
error ER_INCORRECT_TYPE;
select FB_VECTOR_L2('[1, 2, "abc"]', '[1, 2, 3]') as v1;

echo;
echo TEST CASE distance function with column prameter;
echo;
CREATE TABLE t1(c1 BIGINT PRIMARY KEY, c2 JSON);
insert into t1 (WITH RECURSIVE a(i) AS (SELECT 0 union all select i+1 from a where i < 64) SELECT i+10, json_array(i+10, i+11, i) from a);

select *, FB_VECTOR_L2(c2, '[20, 21, 10]') as dis from t1 order by dis limit 5;

DROP TABLE t1;

echo;
echo vector column test cases;
echo;
CREATE TABLE t1(c1 BIGINT PRIMARY KEY, c2 JSON NOT NULL FB_VECTOR_DIMENSION 4);
error ER_INVALID_VECTOR;
insert into t1 values(1, JSON_OBJECT('a', 1));
error ER_INVALID_VECTOR;
insert into t1 values(1, '{}');
error ER_INVALID_VECTOR;
insert into t1 values(1, json_array(1));
error ER_INVALID_VECTOR;
insert into t1 values(1, '[1]');
error ER_INVALID_VECTOR;
insert into t1 values(1, json_array(1, 2, 3, '4'));
insert into t1 values(1, json_array(1, 2, 3, 4));
insert into t1 values(2, '[2,3,4,5]');
select * from t1;
DROP TABLE t1;

echo;
echo vector column definetion error case;
echo vector column should not be nullable;
error ER_WRONG_ARGUMENTS;
CREATE TABLE t1(c1 BIGINT PRIMARY KEY, c2 JSON FB_VECTOR_DIMENSION 4);
echo vector column dimension should not exceed limits;
error ER_WRONG_ARGUMENTS;
CREATE TABLE t1(c1 BIGINT PRIMARY KEY, c2 JSON NOT NULL FB_VECTOR_DIMENSION 1);
error ER_WRONG_ARGUMENTS;
CREATE TABLE t1(c1 BIGINT PRIMARY KEY, c2 JSON NOT NULL FB_VECTOR_DIMENSION 10240);
echo vector column should be json;
error ER_WRONG_ARGUMENTS;
CREATE TABLE t1(c1 BIGINT PRIMARY KEY, c2 BIGINT NOT NULL FB_VECTOR_DIMENSION 4);

echo;
echo blob and json convert functions;
select HEX(FB_VECTOR_JSON_TO_BLOB('[1,2,3]'));
select HEX(FB_VECTOR_JSON_TO_BLOB(JSON_ARRAY(1,2,3)));
CREATE TABLE t1 (id BIGINT NOT NULL PRIMARY KEY,blob1 BLOB NOT NULL);
insert into t1 values(1, UNHEX('0000803F0000004000004040'));
select FB_VECTOR_BLOB_TO_JSON(blob1) from t1 where id=1;
insert into t1 values(2, UNHEX('0000803F00000040000040400'));
echo FB_VECTOR_BLOB_TO_JSON only accepts blob length multiple of sizeof(float);
error ER_INCORRECT_TYPE;
select FB_VECTOR_BLOB_TO_JSON(blob1) from t1 where id=2;
DROP TABLE t1;
