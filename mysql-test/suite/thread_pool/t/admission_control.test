--source include/have_thread_pool_plugin.inc

--source include/count_sessions.inc
create database test_db;
create database test_db2;
create user 'test_user'@'localhost';
grant all on test_db.* to 'test_user'@'localhost';
grant all on test_db2.* to 'test_user'@'localhost';
grant all on test.* to 'test_user'@'localhost';

let $start_aborted_queries = query_get_value(show global status like "Thread_pool_admission_control_aborted_queries", Value, 1);
let $start_running_queries = query_get_value(show global status like "Thread_pool_admission_control_running_queries", Value, 1);
let $start_waiting_queries = query_get_value(show global status like "Thread_pool_admission_control_waiting_queries", Value, 1);

let $ac_entities_query=select * from information_schema.tp_admission_control_entities where schema_name like 'test_db%' order by schema_name;

connection default;
use test_db2;
use test_db;
set @start_max_running_queries= @@global.thread_pool_max_running_queries;
set @start_max_waiting_queries= @@global.thread_pool_max_waiting_queries;
set @@global.thread_pool_max_running_queries=10;
set @@global.thread_pool_max_waiting_queries=5;
create table t1(a int) engine=InnoDB;

# Write lock here ensures the insert queries will block on row lock and be
# in running queue until unlock tables is executed.
lock table t1 write;

disable_query_log;
disable_result_log;
let $i= 15;
while ($i)
{
  connect (con$i, localhost, test_user,,test_db);
  dec $i;
}
let $i= 10;
while($i)
{
  connection con$i;
  # These queries will be in running queue
  send insert into t1 values(1);
  dec $i;
}
let $i= 15;
while ($i != 10)
{
  # These queries will be in waiting queue
  connection con$i;
  send insert into t1 values(1);
  dec $i;
}
enable_query_log;
enable_result_log;

connection default;
--echo Threads waiting for admission will have appropriate state set in processlist.
let $wait_condition=
  select count(*)=5 from information_schema.processlist where state='waiting for admission';
source include/wait_condition.inc;
--echo Super user is exempted from admission control checks.
select * from t1;

# set filter to bypass USE statement
--let $saved_admission_control_filter = `SELECT @@global.thread_pool_admission_control_filter`
set @@global.thread_pool_admission_control_filter = 'USE';
select @@global.thread_pool_admission_control_filter;

# Test failure case
# Default db is intentionally not set when creating the connection
connect (con_max_wait, localhost, test_user,,);
connection con_max_wait;

# Test multi-statement packet with use statement.
delimiter ||||;
--echo Maximum waiting queries reached. So this would hit an error.
--error ER_DB_ADMISSION_CONTROL
# switch the session's default db to test_db, which (the use statement) should
# be bypassed in admission control. The select statement will fail.
use test_db;
select * from t1||||

# Query will only fail on test_db, but not on test_db2
--echo Maximum waiting queries reached. So this would hit an error.
--error ER_DB_ADMISSION_CONTROL
use test_db2;
create table t1_test(aaa int);
insert into t1_test values (1);
select aaa from t1_test;
drop table t1_test;
use test_db;
select * from t1||||

# Add SELECT to filter.
connection default||||
set @@global.thread_pool_admission_control_filter = 'USE,SELECT'||||
select @@global.thread_pool_admission_control_filter||||

# Even though by default sub-statements are not filtered once multiquery
# statement is admitted, USE forces to exit AC, so subsequent SELECT is
# filtered.
--echo Sub-statement SELECT after USE is filtered so it should succeed.
connection con_max_wait||||
use test;
create table t2_test(aaa int);
insert into t2_test values (1);
select aaa from t2_test;
drop table t2_test;
use test_db;
select 1||||

delimiter ;||||

# Restore filters
connection default;
set @@global.thread_pool_admission_control_filter = 'USE';
select @@global.thread_pool_admission_control_filter;

# USE is ok
connection con_max_wait;
use test_db;

# Single statement
--error ER_DB_ADMISSION_CONTROL
select * from t1;

disconnect con_max_wait;

connection default;
# reset admission_control_filter
--eval set @@global.thread_pool_admission_control_filter = '$saved_admission_control_filter'
select @@global.thread_pool_admission_control_filter;

--echo Check status variables
let $aborted_queries = query_get_value(show global status like "Thread_pool_admission_control_aborted_queries", Value, 1);
let $running_queries = query_get_value(show global status like "Thread_pool_admission_control_running_queries", Value, 1);
let $waiting_queries = query_get_value(show global status like "Thread_pool_admission_control_waiting_queries", Value, 1);
let $aborted_queries = `select $aborted_queries - $start_aborted_queries`;
let $running_queries = `select $running_queries - $start_running_queries`;
let $waiting_queries = `select $waiting_queries - $start_waiting_queries`;
--echo aborted_queries = $aborted_queries
--echo running_queries = $running_queries
--echo waiting_queries = $waiting_queries
eval $ac_entities_query;

--echo Filled up queues on one db doesn't affect queries on other db.
connect (con_test, localhost, test_user,,test_db2);
connection con_test;
use test_db2;
eval $ac_entities_query;
disconnect con_test;

--echo Dynamically disable/enable thread pool plugin.
connect (con_disabled0, localhost, test_user,,test_db);
connection con_disabled0;
--error ER_DB_ADMISSION_CONTROL
select * from t1;

connection default;
set @@global.thread_pool_on=false;

--echo Query on existing thread pool connection succeeds now.
connection con_disabled0;
select 1;

--echo Query on new connection will wait on the table lock.
connect (con_disabled1, localhost, test_user,,test_db);
connection con_disabled1;
send select * from t1;

--echo Query on another new connection will succeed.
connect (con_disabled2, localhost, test_user,,test_db);
connection con_disabled2;
eval $ac_entities_query;

connection default;
set @@global.thread_pool_on=true;

--echo Query on the second connection will still run even with thread pool enabled.
connection con_disabled2;
eval $ac_entities_query;
disconnect con_disabled2;

--echo After thread pool is enabled query on new connection will be rejected.
connect (con_enabled, localhost, test_user,,test_db);
connection con_enabled;
--error ER_DB_ADMISSION_CONTROL
select * from t1;
disconnect con_enabled;

--echo Query on existing thread pool connection is also rejected.
connection con_disabled0;
--error ER_DB_ADMISSION_CONTROL
select * from t1;
disconnect con_disabled0;

connection default;
set @@global.thread_pool_max_waiting_queries=6;

# Insert queries sent above will be unblocked by this.
use test_db;
unlock tables;

disable_query_log;
disable_result_log;
let $i= 15;
while ($i)
{
  connection con$i;
  reap;
  dec $i;
}
connection con_disabled1;
reap;
disconnect con_disabled1;
enable_query_log;
enable_result_log;
connection default;
--echo Verify the waiting queries received wakeup signal.
select count(*) from t1;

--echo # Test admission_control_queue_timeout
connection default;
use test_db;
set @@global.thread_pool_max_running_queries=1;
set @@global.thread_pool_max_waiting_queries=5;

set @save_admission_control_filter = @@global.thread_pool_admission_control_filter;
set @save_admission_control_queue_timeout = @@global.thread_pool_admission_control_queue_timeout;
set @@global.thread_pool_admission_control_queue_timeout = 0;
set @@global.thread_pool_admission_control_filter = 'BEGIN,COMMIT,ROLLBACK';

let $start_timeout_queries = query_get_value(show global status like "Thread_pool_admission_control_timeout_queries", Value, 1);

create table t2(a int primary key) engine=InnoDB;

connect (con_timeout1, localhost, test_user,,test_db);
begin;
insert into t2 values (1);

connect (con_timeout2, localhost, test_user,,test_db);
begin;
send insert into t2 values (1);

connection default;
let $wait_condition= select count(*) = 1 from information_schema.processlist where state = "update" and info = "insert into t2 values (1)";
--source include/wait_condition.inc

connection con_timeout1;
--error ER_DB_ADMISSION_CONTROL_TIMEOUT
insert into t2 values (2);
rollback;

connection con_timeout2;
reap;
rollback;

# Cleanup
connection default;
disconnect con_timeout1;
disconnect con_timeout2;
drop table t2;

# Verify counters
let $timeout_queries = query_get_value(show global status like "Thread_pool_admission_control_timeout_queries", Value, 1);
let $timeout_queries = `select $timeout_queries - $start_timeout_queries`;
--echo timeout_queries should be 1
--echo timeout_queries = $timeout_queries
let $waiting_queries = query_get_value(show global status like "Thread_pool_admission_control_waiting_queries", Value, 1);
--echo waiting_queries should be 0
--echo waiting_queries = $waiting_queries
eval $ac_entities_query;

# Test filtering sub-statements once multiquery statement is admitted.
set @@global.thread_pool_admission_control_filter = 'ROLLBACK,INSERT';
create table t3(a int primary key) engine=InnoDB;

connect (con_mq1, localhost, test_user,,test_db);
begin;
insert into t3 values (1);

connect (con_mq2, localhost, test_user,,test_db);
# By default INSERT will not be filtered in multiquery statement after admission.
delimiter ||||;
send begin;
insert into t3 values (1)||||
delimiter ;||||

connection default;
let $wait_condition= select count(*) = 1 from information_schema.processlist where state = "update" and info = "insert into t3 values (1)";
--source include/wait_condition.inc
eval $ac_entities_query;

connection con_mq1;
-- echo SELECT should timeout
--error ER_DB_ADMISSION_CONTROL_TIMEOUT
select * from t3;
rollback;

connection con_mq2;
reap;
rollback;

# Now enable multiquery filtering.
connection default;
set @@global.thread_pool_admission_control_multiquery_filter = ON;

# Start transaction again.
connection con_mq1;
begin;
insert into t3 values (1);

connection con_mq2;
# Now INSERT will be filtered and release AC slot.
delimiter ||||;
send begin;
insert into t3 values (1)||||
delimiter ;||||

connection default;
let $wait_condition= select count(*) = 1 from information_schema.processlist where state = "update" and info = "insert into t3 values (1)";
--source include/wait_condition.inc
eval $ac_entities_query;

connection con_mq1;
-- echo SELECT should succeed
select * from t3;
rollback;

connection con_mq2;
reap;
rollback;

connection default;
set @@global.thread_pool_admission_control_filter = @save_admission_control_filter;
set @@global.thread_pool_admission_control_queue_timeout = @save_admission_control_queue_timeout;
set @@global.thread_pool_admission_control_multiquery_filter = OFF;
disconnect con_mq1;
disconnect con_mq2;

--echo reset global.thread_pool_max_running_queries and global.thread_pool_max_waiting_queries
set @@global.thread_pool_max_running_queries=10;
set @@global.thread_pool_max_waiting_queries=5;
--echo Run parallel load and drop the database.
# Verify the waiting queries will receive the signal from DROP DATABASE
# and exit with appropriate error ER_NO_SUCH_TABLE. max_waiting_queries=0
# is used to not have a limit on number of waiting queries.
set @@global.thread_pool_max_waiting_queries=0; # No limit on waiting queue.
disable_query_log;
disable_result_log;
let $i= 15;
while($i)
{
  connection con$i;
  # 10 queries (max_running_queries is 10) will be in running queue.
  # Using sleep(10) in the insert ensures some queries end up in waiting queue.
  send insert into t1(select sleep(10));
  dec $i;
}
connection default;
drop database test_db;
drop database test_db2;
let $i= 15;
while($i)
{
  connection con$i;
  error 0,ER_BAD_DB_ERROR,ER_LOCK_DEADLOCK;
  reap;
  dec $i;
}
enable_query_log;
enable_result_log;

--echo Cleanup.
connection default;
--echo Verify there are no waiting threads.
select count(*) from information_schema.processlist where state='waiting for admission';
eval $ac_entities_query;
set @@global.thread_pool_max_running_queries=@start_max_running_queries;
set @@global.thread_pool_max_waiting_queries=@start_max_waiting_queries;
drop user test_user@localhost;
disable_query_log;
disable_result_log;
let $i= 15;
while ($i)
{
  disconnect con$i;
  dec $i;
}
enable_query_log;
enable_result_log;
--source include/wait_until_count_sessions.inc
